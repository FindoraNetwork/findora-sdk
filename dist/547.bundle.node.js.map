{"version":3,"sources":["webpack://@findora-network/findora-sdk.js/./node_modules/findora-wallet-wasm/bundler/wasm_bg.js"],"names":["heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","addHeapObject","obj","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","u32CvtShim","Uint32Array","uint64CvtShim","BigUint64Array","stack_pointer","addBorrowedObject","_assertClass","instance","klass","build_id","r0","r1","random_asset_type","asset_type_from_jsvalue","verify_authenticated_txn","state_commitment","authenticated_txn","ptr0","len0","ptr1","len1","verify_authenticated_custom_data_result","authenticated_res","calculate_fee","ir_numerator","ir_denominator","outstanding_balance","low0","high0","low1","high1","low2","high2","get_null_pk","XfrPublicKey","__wrap","create_default_policy_info","create_debt_policy_info","fiat_code","loan_amount","ptr2","len2","low3","high3","create_debt_memo","isLikeNone","x","cachegetUint32Memory0","open_client_asset_record","record","owner_memo","keypair","ClientAssetRecord","OwnerMemo","XfrKeyPair","get_pub_key_str","key_pair","get_priv_key_str","new_keypair","new_keypair_from_seed","seed_str","public_key_to_base64","key","public_key_from_base64","pk","keypair_to_str","keypair_from_str","str","wasm_credential_issuer_key_gen","attributes","CredentialIssuerKeyPair","wasm_credential_verify_commitment","issuer_pub_key","commitment","pok","xfr_pk","CredIssuerPublicKey","CredentialCommitment","CredentialPoK","wasm_credential_open_commitment","user_secret_key","credential","reveal_fields","CredUserSecretKey","Credential","CredentialCommitmentKey","wasm_credential_user_key_gen","CredentialUserKeyPair","wasm_credential_sign","issuer_secret_key","user_public_key","CredIssuerSecretKey","CredUserPublicKey","CredentialSignature","create_credential","issuer_public_key","signature","wasm_credential_commit","CredentialCommitmentData","wasm_credential_reveal","user_sk","CredentialRevealSig","wasm_credential_verify","trace_assets","xfr_body","tracer_keypair","_candidate_assets","AssetTracerKeyPair","public_key_to_bech32","public_key_from_bech32","addr","bech32_to_base64","base64_to_bech32","getArrayU8FromWasm0","encryption_pbkdf2_aes256gcm","password","v2","decryption_pbkdf2_aes256gcm","enc_key_pair","passArray8ToWasm0","create_keypair_from_secret","sk_str","get_pk_from_keypair","kp","generate_mnemonic_default","generate_mnemonic_custom","wordslen","lang","restore_keypair_from_mnemonic_default","phrase","restore_keypair_from_mnemonic_bip44","path","BipPath","restore_keypair_from_mnemonic_bip49","fra_get_asset_code","fra_get_minimal_fee","fra_get_dest_pubkey","handleError","f","apply","this","arguments","e","AssetRules","Object","create","prototype","policy","TracingPolicy","max_units","transferable","updatable","multisig_rules","SignatureRules","decimals","AssetType","json","TracingPolicies","AuthenticatedAIRResult","AuthenticatedAssetRecord","coin","account","change","address","FeeInputs","am","tr","ar","om","TxoRef","ptr3","ptr4","KVBlind","KVHash","data","kv_blind","Key","string","PublicParams","threshold","weights","tracing_key","cred_issuer_key","reveal_map","tracing","TransactionBuilder","v0","result","getArrayJsValueFromWasm0","inputs","seq_id","memo","token_code","asset_rules","policy_choice","which_check","seq_num","amount","conf_amount","zei_params","auth_key_pair","kv_hash","new_memo","op","TransferOperationBuilder","txo_ref","asset_record","tracing_policies","recipient","conf_type","input_idx","arg0","__wbindgen_object_drop_ref","__wbindgen_json_serialize","arg1","__wbindgen_string_new","__wbindgen_json_parse","parse","__wbg_getRandomValues_57e4008f45f0e105","getRandomValues","__wbg_randomFillSync_d90848a552cbd666","arg2","randomFillSync","__wbg_self_f865985e662246aa","self","__wbg_static_accessor_MODULE_39947eb3fe77895f","__wbg_require_c59851dfa0dc7e78","__wbg_crypto_bfb05100db79193b","crypto","__wbg_msCrypto_f6dddc6ae048b7e2","msCrypto","__wbindgen_is_undefined","__wbg_self_86b4b13392c7af56","__wbg_static_accessor_MODULE_452b4680e8614c81","__wbg_require_f5521a5b85ad2542","__wbg_crypto_b8c92eaac23d0d80","__wbg_msCrypto_9ad6677321a08dd8","__wbg_getRandomValues_dd27e6b0652b3236","__wbg_getRandomValues_e57c9b75ddead065","__wbg_randomFillSync_d2ba53160aec6aba","__wbg_buffer_eb5185aa4a8e9c62","__wbg_length_2e324c9c0e74a81d","__wbg_new_3d94e83f0a6bf252","__wbg_set_d4d7629a896d4b3e","__wbg_newwithlength_02a009c0728d3ba1","__wbg_subarray_cc54babc55409ee0","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_memory"],"mappings":"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","file":"547.bundle.node.js","sourcesContent":["import * as wasm from './wasm_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst u32CvtShim = new Uint32Array(2);\n\nconst uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* Returns the git commit hash and commit date of the commit this library was built against.\n* @returns {string}\n*/\nexport function build_id() {\n    try {\n        wasm.build_id(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Generates random Base64 encoded asset type as a Base64 string. Used in asset definitions.\n* @see {@link\n* module:Findora-Wasm~TransactionBuilder#add_operation_create_asset|add_operation_create_asset}\n* for instructions on how to define an asset with a new\n* asset type\n* @returns {string}\n*/\nexport function random_asset_type() {\n    try {\n        wasm.random_asset_type(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Generates asset type as a Base64 string from a JSON-serialized JavaScript value.\n* @param {any} val\n* @returns {string}\n*/\nexport function asset_type_from_jsvalue(val) {\n    try {\n        wasm.asset_type_from_jsvalue(8, addBorrowedObject(val));\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        heap[stack_pointer++] = undefined;\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Given a serialized state commitment and transaction, returns true if the transaction correctly\n* hashes up to the state commitment and false otherwise.\n* @param {string} state_commitment - String representing the state commitment.\n* @param {string} authenticated_txn - String representing the transaction.\n* @see {@link module:Network~Network#getTxn|Network.getTxn} for instructions on fetching a transaction from the ledger.\n* @see {@link module:Network~Network#getStateCommitment|Network.getStateCommitment}\n* for instructions on fetching a ledger state commitment.\n* @throws Will throw an error if the state commitment or the transaction fails to deserialize.\n* @param {string} state_commitment\n* @param {string} authenticated_txn\n* @returns {boolean}\n*/\nexport function verify_authenticated_txn(state_commitment, authenticated_txn) {\n    var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(authenticated_txn, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.verify_authenticated_txn(ptr0, len0, ptr1, len1);\n    return ret !== 0;\n}\n\n/**\n* Given a serialized state commitment and an authenticated custom data result, returns true if the custom data result correctly\n* hashes up to the state commitment and false otherwise.\n* @param {string} state_commitment - String representing the state commitment.\n* @param {JsValue} authenticated_txn - JSON-encoded value representing the authenticated custom\n* data result.\n* @throws Will throw an error if the state commitment or the authenticated result fail to deserialize.\n* @param {string} state_commitment\n* @param {any} authenticated_res\n* @returns {boolean}\n*/\nexport function verify_authenticated_custom_data_result(state_commitment, authenticated_res) {\n    var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.verify_authenticated_custom_data_result(ptr0, len0, addHeapObject(authenticated_res));\n    return ret !== 0;\n}\n\n/**\n* Performs a simple loan repayment fee calculation.\n*\n* The returned fee is a fraction of the `outstanding_balance`\n* where the interest rate is expressed as a fraction `ir_numerator` / `ir_denominator`.\n*\n* This function is specific to the  Lending Demo.\n* @param {BigInt} ir_numerator - Interest rate numerator.\n* @param {BigInt} ir_denominator - Interest rate denominator.\n* @param {BigInt} outstanding_balance - Amount of outstanding debt.\n* @ignore\n* @param {BigInt} ir_numerator\n* @param {BigInt} ir_denominator\n* @param {BigInt} outstanding_balance\n* @returns {BigInt}\n*/\nexport function calculate_fee(ir_numerator, ir_denominator, outstanding_balance) {\n    uint64CvtShim[0] = ir_numerator;\n    const low0 = u32CvtShim[0];\n    const high0 = u32CvtShim[1];\n    uint64CvtShim[0] = ir_denominator;\n    const low1 = u32CvtShim[0];\n    const high1 = u32CvtShim[1];\n    uint64CvtShim[0] = outstanding_balance;\n    const low2 = u32CvtShim[0];\n    const high2 = u32CvtShim[1];\n    wasm.calculate_fee(8, low0, high0, low1, high1, low2, high2);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    u32CvtShim[0] = r0;\n    u32CvtShim[1] = r1;\n    const n3 = uint64CvtShim[0];\n    return n3;\n}\n\n/**\n* Returns an address to use for cancelling debt tokens in a debt swap.\n* @ignore\n* @returns {XfrPublicKey}\n*/\nexport function get_null_pk() {\n    var ret = wasm.get_null_pk();\n    return XfrPublicKey.__wrap(ret);\n}\n\n/**\n* @ignore\n* @returns {string}\n*/\nexport function create_default_policy_info() {\n    try {\n        wasm.create_default_policy_info(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Create policy information needed for debt token asset types.\n* This data will be parsed by the policy evalautor to ensure\n* that all payment and fee amounts are correct.\n* # Arguments\n*\n* * `ir_numerator` - interest rate numerator\n* * `ir_denominator`- interest rate denominator\n* * `fiat_code` - Base64 string representing asset type used to pay off the loan\n* * `amount` - loan amount\n* @ignore\n* @param {BigInt} ir_numerator\n* @param {BigInt} ir_denominator\n* @param {string} fiat_code\n* @param {BigInt} loan_amount\n* @returns {string}\n*/\nexport function create_debt_policy_info(ir_numerator, ir_denominator, fiat_code, loan_amount) {\n    try {\n        uint64CvtShim[0] = ir_numerator;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        uint64CvtShim[0] = ir_denominator;\n        const low1 = u32CvtShim[0];\n        const high1 = u32CvtShim[1];\n        var ptr2 = passStringToWasm0(fiat_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        uint64CvtShim[0] = loan_amount;\n        const low3 = u32CvtShim[0];\n        const high3 = u32CvtShim[1];\n        wasm.create_debt_policy_info(8, low0, high0, low1, high1, ptr2, len2, low3, high3);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Creates the memo needed for debt token asset types. The memo will be parsed by the policy evaluator to ensure\n* that all payment and fee amounts are correct.\n* @param {BigInt} ir_numerator  - Interest rate numerator.\n* @param {BigInt} ir_denominator - Interest rate denominator.\n* @param {string} fiat_code - Base64 string representing asset type used to pay off the loan.\n* @param {BigInt} loan_amount - Loan amount.\n* @throws Will throw an error if `fiat_code` fails to deserialize.\n* @ignore\n* @param {BigInt} ir_numerator\n* @param {BigInt} ir_denominator\n* @param {string} fiat_code\n* @param {BigInt} loan_amount\n* @returns {string}\n*/\nexport function create_debt_memo(ir_numerator, ir_denominator, fiat_code, loan_amount) {\n    try {\n        uint64CvtShim[0] = ir_numerator;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        uint64CvtShim[0] = ir_denominator;\n        const low1 = u32CvtShim[0];\n        const high1 = u32CvtShim[1];\n        var ptr2 = passStringToWasm0(fiat_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        uint64CvtShim[0] = loan_amount;\n        const low3 = u32CvtShim[0];\n        const high3 = u32CvtShim[1];\n        wasm.create_debt_memo(8, low0, high0, low1, high1, ptr2, len2, low3, high3);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    const mem = getUint32Memory0();\n    const slice = mem.subarray(ptr / 4, ptr / 4 + len);\n    const result = [];\n    for (let i = 0; i < slice.length; i++) {\n        result.push(takeObject(slice[i]));\n    }\n    return result;\n}\n/**\n* Returns a JavaScript object containing decrypted owner record information,\n* where `amount` is the decrypted asset amount, and `asset_type` is the decrypted asset type code.\n*\n* @param {ClientAssetRecord} record - Owner record.\n* @param {OwnerMemo} owner_memo - Owner memo of the associated record.\n* @param {XfrKeyPair} keypair - Keypair of asset owner.\n* @see {@link module:Findora-Wasm~ClientAssetRecord#from_json_record|ClientAssetRecord.from_json_record} for information about how to construct an asset record object\n* from a JSON result returned from the ledger server.\n* @param {ClientAssetRecord} record\n* @param {OwnerMemo | undefined} owner_memo\n* @param {XfrKeyPair} keypair\n* @returns {any}\n*/\nexport function open_client_asset_record(record, owner_memo, keypair) {\n    _assertClass(record, ClientAssetRecord);\n    let ptr0 = 0;\n    if (!isLikeNone(owner_memo)) {\n        _assertClass(owner_memo, OwnerMemo);\n        ptr0 = owner_memo.ptr;\n        owner_memo.ptr = 0;\n    }\n    _assertClass(keypair, XfrKeyPair);\n    var ret = wasm.open_client_asset_record(record.ptr, ptr0, keypair.ptr);\n    return takeObject(ret);\n}\n\n/**\n* Extracts the public key as a string from a transfer key pair.\n* @param {XfrKeyPair} key_pair\n* @returns {string}\n*/\nexport function get_pub_key_str(key_pair) {\n    try {\n        _assertClass(key_pair, XfrKeyPair);\n        wasm.get_pub_key_str(8, key_pair.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Extracts the private key as a string from a transfer key pair.\n* @param {XfrKeyPair} key_pair\n* @returns {string}\n*/\nexport function get_priv_key_str(key_pair) {\n    try {\n        _assertClass(key_pair, XfrKeyPair);\n        wasm.get_priv_key_str(8, key_pair.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Creates a new transfer key pair.\n* @returns {XfrKeyPair}\n*/\nexport function new_keypair() {\n    var ret = wasm.new_keypair();\n    return XfrKeyPair.__wrap(ret);\n}\n\n/**\n* Generates a new keypair deterministically from a seed string and an optional name.\n* @param {string} seed_str\n* @param {string | undefined} name\n* @returns {XfrKeyPair}\n*/\nexport function new_keypair_from_seed(seed_str, name) {\n    var ptr0 = passStringToWasm0(seed_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = isLikeNone(name) ? 0 : passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.new_keypair_from_seed(ptr0, len0, ptr1, len1);\n    return XfrKeyPair.__wrap(ret);\n}\n\n/**\n* Returns base64 encoded representation of an XfrPublicKey.\n* @param {XfrPublicKey} key\n* @returns {string}\n*/\nexport function public_key_to_base64(key) {\n    try {\n        _assertClass(key, XfrPublicKey);\n        wasm.public_key_to_base64(8, key.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Converts a base64 encoded public key string to a public key.\n* @param {string} pk\n* @returns {XfrPublicKey}\n*/\nexport function public_key_from_base64(pk) {\n    var ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.public_key_from_base64(ptr0, len0);\n    return XfrPublicKey.__wrap(ret);\n}\n\n/**\n* Expresses a transfer key pair as a hex-encoded string.\n* To decode the string, use `keypair_from_str` function.\n* @param {XfrKeyPair} key_pair\n* @returns {string}\n*/\nexport function keypair_to_str(key_pair) {\n    try {\n        _assertClass(key_pair, XfrKeyPair);\n        wasm.keypair_to_str(8, key_pair.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Constructs a transfer key pair from a hex-encoded string.\n* The encode a key pair, use `keypair_to_str` function.\n* @param {string} str\n* @returns {XfrKeyPair}\n*/\nexport function keypair_from_str(str) {\n    var ptr0 = passStringToWasm0(str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.keypair_from_str(ptr0, len0);\n    return XfrKeyPair.__wrap(ret);\n}\n\n/**\n* Generates a new credential issuer key.\n* @param {JsValue} attributes - Array of attribute types of the form `[{name: \"credit_score\",\n* size: 3}]`. The size refers to byte-size of the credential. In this case, the \"credit_score\"\n* attribute is represented as a 3 byte string \"760\". `attributes` is the list of attribute types\n* that the issuer can sign off on.\n* @param {any} attributes\n* @returns {CredentialIssuerKeyPair}\n*/\nexport function wasm_credential_issuer_key_gen(attributes) {\n    var ret = wasm.wasm_credential_issuer_key_gen(addHeapObject(attributes));\n    return CredentialIssuerKeyPair.__wrap(ret);\n}\n\n/**\n* Verifies a credential commitment. Used to confirm that a credential is tied to a ledger\n* address.\n* @param {CredIssuerPublicKey} issuer_pub_key - The credential issuer that has attested to the\n* credentials that have been committed to.\n* @param {CredentialCommitment} Credential commitment\n* @param {CredPoK} Proof of knowledge of the underlying commitment\n* @param {XfrPublicKey} Ledger address linked to this credential commitment.\n* @throws Will throw an error during verification failure (i.e. the supplied ledger address is\n* incorrect, the commitment is tied to a different credential issuer, or the proof of knowledge is\n* invalid, etc.)\n* @param {CredIssuerPublicKey} issuer_pub_key\n* @param {CredentialCommitment} commitment\n* @param {CredentialPoK} pok\n* @param {XfrPublicKey} xfr_pk\n*/\nexport function wasm_credential_verify_commitment(issuer_pub_key, commitment, pok, xfr_pk) {\n    _assertClass(issuer_pub_key, CredIssuerPublicKey);\n    _assertClass(commitment, CredentialCommitment);\n    _assertClass(pok, CredentialPoK);\n    _assertClass(xfr_pk, XfrPublicKey);\n    wasm.wasm_credential_verify_commitment(issuer_pub_key.ptr, commitment.ptr, pok.ptr, xfr_pk.ptr);\n}\n\n/**\n* Generates a new reveal proof from a credential commitment key.\n* @param {CredUserSecretKey} user_secret_key - Secret key of the credential user who owns\n* the credentials.\n* @param {Credential} credential - Credential whose attributes will be revealed.\n* @param {JsValue} reveal_fields - Array of strings representing attribute fields to reveal.\n* @throws Will throw an error if a reveal proof cannot be generated from the credential\n* or ```reveal_fields``` fails to deserialize.\n* @param {CredUserSecretKey} user_secret_key\n* @param {Credential} credential\n* @param {CredentialCommitmentKey} key\n* @param {any} reveal_fields\n* @returns {CredentialPoK}\n*/\nexport function wasm_credential_open_commitment(user_secret_key, credential, key, reveal_fields) {\n    _assertClass(user_secret_key, CredUserSecretKey);\n    _assertClass(credential, Credential);\n    _assertClass(key, CredentialCommitmentKey);\n    var ret = wasm.wasm_credential_open_commitment(user_secret_key.ptr, credential.ptr, key.ptr, addHeapObject(reveal_fields));\n    return CredentialPoK.__wrap(ret);\n}\n\n/**\n* Generates a new credential user key.\n* @param {CredIssuerPublicKey} issuer_pub_key - The credential issuer that can sign off on this\n* user's attributes.\n* @param {CredIssuerPublicKey} issuer_pub_key\n* @returns {CredentialUserKeyPair}\n*/\nexport function wasm_credential_user_key_gen(issuer_pub_key) {\n    _assertClass(issuer_pub_key, CredIssuerPublicKey);\n    var ret = wasm.wasm_credential_user_key_gen(issuer_pub_key.ptr);\n    return CredentialUserKeyPair.__wrap(ret);\n}\n\n/**\n* Generates a signature on user attributes that can be used to create a credential.\n* @param {CredIssuerSecretKey} issuer_secret_key - Secret key of credential issuer.\n* @param {CredUserPublicKey} user_public_key - Public key of credential user.\n* @param {JsValue} attributes - Array of attribute assignments of the form `[{name: \"credit_score\",\n* val: \"760\"}]`.\n* @throws Will throw an error if the signature cannot be generated.\n* @param {CredIssuerSecretKey} issuer_secret_key\n* @param {CredUserPublicKey} user_public_key\n* @param {any} attributes\n* @returns {CredentialSignature}\n*/\nexport function wasm_credential_sign(issuer_secret_key, user_public_key, attributes) {\n    _assertClass(issuer_secret_key, CredIssuerSecretKey);\n    _assertClass(user_public_key, CredUserPublicKey);\n    var ret = wasm.wasm_credential_sign(issuer_secret_key.ptr, user_public_key.ptr, addHeapObject(attributes));\n    return CredentialSignature.__wrap(ret);\n}\n\n/**\n* Generates a signature on user attributes that can be used to create a credential.\n* @param {CredIssuerPublicKey} issuer_public_key - Public key of credential issuer.\n* @param {CredentialSignature} signature - Credential issuer signature on attributes.\n* @param {JsValue} attributes - Array of attribute assignments of the form `[{name: \"credit_score\",\n* val: \"760\"}]'.\n* @param {CredIssuerPublicKey} issuer_public_key\n* @param {CredentialSignature} signature\n* @param {any} attributes\n* @returns {Credential}\n*/\nexport function create_credential(issuer_public_key, signature, attributes) {\n    try {\n        _assertClass(issuer_public_key, CredIssuerPublicKey);\n        _assertClass(signature, CredentialSignature);\n        var ret = wasm.create_credential(issuer_public_key.ptr, signature.ptr, addBorrowedObject(attributes));\n        return Credential.__wrap(ret);\n    } finally {\n        heap[stack_pointer++] = undefined;\n    }\n}\n\n/**\n* Generates a credential commitment. A credential commitment can be used to selectively reveal\n* attribute assignments.\n* @param {CredUserSecretKey} user_secret_key - Secret key of credential user.\n* @param {XfrPublicKey} user_public_key - Ledger signing key to link this credential to.\n* @param {Credential} credential - Credential object.\n* @param {CredUserSecretKey} user_secret_key\n* @param {XfrPublicKey} user_public_key\n* @param {Credential} credential\n* @returns {CredentialCommitmentData}\n*/\nexport function wasm_credential_commit(user_secret_key, user_public_key, credential) {\n    _assertClass(user_secret_key, CredUserSecretKey);\n    _assertClass(user_public_key, XfrPublicKey);\n    _assertClass(credential, Credential);\n    var ret = wasm.wasm_credential_commit(user_secret_key.ptr, user_public_key.ptr, credential.ptr);\n    return CredentialCommitmentData.__wrap(ret);\n}\n\n/**\n* Selectively reveals attributes committed to in a credential commitment\n* @param {CredUserSecretKey} user_sk - Secret key of credential user.\n* @param {Credential} credential - Credential object.\n* @param {JsValue} reveal_fields - Array of string names representing credentials to reveal (i.e.\n* `[\"credit_score\"]`).\n* @param {CredUserSecretKey} user_sk\n* @param {Credential} credential\n* @param {any} reveal_fields\n* @returns {CredentialRevealSig}\n*/\nexport function wasm_credential_reveal(user_sk, credential, reveal_fields) {\n    _assertClass(user_sk, CredUserSecretKey);\n    _assertClass(credential, Credential);\n    var ret = wasm.wasm_credential_reveal(user_sk.ptr, credential.ptr, addHeapObject(reveal_fields));\n    return CredentialRevealSig.__wrap(ret);\n}\n\n/**\n* Verifies revealed attributes from a commitment.\n* @param {CredIssuerPublicKey} issuer_pub_key - Public key of credential issuer.\n* @param {JsValue} attributes - Array of attribute assignments to check of the form `[{name: \"credit_score\",\n* val: \"760\"}]`.\n* @param {CredentialCommitment} commitment - Commitment to the credential.\n* @param {CredentialPoK} pok - Proof that the credential commitment is valid and commits\n* to the attribute values being revealed.\n* @param {CredIssuerPublicKey} issuer_pub_key\n* @param {any} attributes\n* @param {CredentialCommitment} commitment\n* @param {CredentialPoK} pok\n*/\nexport function wasm_credential_verify(issuer_pub_key, attributes, commitment, pok) {\n    _assertClass(issuer_pub_key, CredIssuerPublicKey);\n    _assertClass(commitment, CredentialCommitment);\n    _assertClass(pok, CredentialPoK);\n    wasm.wasm_credential_verify(issuer_pub_key.ptr, addHeapObject(attributes), commitment.ptr, pok.ptr);\n}\n\n/**\n* Returns information about traceable assets for a given transfer.\n* @param {JsValue} xfr_body - JSON of a transfer note from a transfer operation.\n* @param {AssetTracerKeyPair} tracer_keypair - Asset tracer keypair.\n* @param {JsValue} candidate_assets - List of asset types traced by the tracer keypair.\n* @param {any} xfr_body\n* @param {AssetTracerKeyPair} tracer_keypair\n* @param {any} _candidate_assets\n* @returns {any}\n*/\nexport function trace_assets(xfr_body, tracer_keypair, _candidate_assets) {\n    _assertClass(tracer_keypair, AssetTracerKeyPair);\n    var ret = wasm.trace_assets(addHeapObject(xfr_body), tracer_keypair.ptr, addHeapObject(_candidate_assets));\n    return takeObject(ret);\n}\n\n/**\n* Returns bech32 encoded representation of an XfrPublicKey.\n* @param {XfrPublicKey} key\n* @returns {string}\n*/\nexport function public_key_to_bech32(key) {\n    try {\n        _assertClass(key, XfrPublicKey);\n        wasm.public_key_to_bech32(8, key.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Converts a bech32 encoded public key string to a public key.\n* @param {string} addr\n* @returns {XfrPublicKey}\n*/\nexport function public_key_from_bech32(addr) {\n    var ptr0 = passStringToWasm0(addr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.public_key_from_bech32(ptr0, len0);\n    return XfrPublicKey.__wrap(ret);\n}\n\n/**\n* @param {string} pk\n* @returns {string}\n*/\nexport function bech32_to_base64(pk) {\n    try {\n        var ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.bech32_to_base64(8, ptr0, len0);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} pk\n* @returns {string}\n*/\nexport function base64_to_bech32(pk) {\n    try {\n        var ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.base64_to_bech32(8, ptr0, len0);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {string} key_pair\n* @param {string} password\n* @returns {Uint8Array}\n*/\nexport function encryption_pbkdf2_aes256gcm(key_pair, password) {\n    var ptr0 = passStringToWasm0(key_pair, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.encryption_pbkdf2_aes256gcm(8, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v2;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} enc_key_pair\n* @param {string} password\n* @returns {string}\n*/\nexport function decryption_pbkdf2_aes256gcm(enc_key_pair, password) {\n    try {\n        var ptr0 = passArray8ToWasm0(enc_key_pair, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.decryption_pbkdf2_aes256gcm(8, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} sk_str\n* @returns {XfrKeyPair | undefined}\n*/\nexport function create_keypair_from_secret(sk_str) {\n    var ptr0 = passStringToWasm0(sk_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.create_keypair_from_secret(ptr0, len0);\n    return ret === 0 ? undefined : XfrKeyPair.__wrap(ret);\n}\n\n/**\n* @param {XfrKeyPair} kp\n* @returns {XfrPublicKey}\n*/\nexport function get_pk_from_keypair(kp) {\n    _assertClass(kp, XfrKeyPair);\n    var ret = wasm.get_pk_from_keypair(kp.ptr);\n    return XfrPublicKey.__wrap(ret);\n}\n\n/**\n* Randomly generate a 12words-length mnemonic.\n* @returns {string}\n*/\nexport function generate_mnemonic_default() {\n    try {\n        wasm.generate_mnemonic_default(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Generate mnemonic with custom length and language.\n* - @param `wordslen`: acceptable value are one of [ 12, 15, 18, 21, 24 ]\n* - @param `lang`: acceptable value are one of [ \"en\", \"zh\", \"zh_traditional\", \"fr\", \"it\", \"ko\", \"sp\", \"jp\" ]\n* @param {number} wordslen\n* @param {string} lang\n* @returns {string}\n*/\nexport function generate_mnemonic_custom(wordslen, lang) {\n    try {\n        var ptr0 = passStringToWasm0(lang, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.generate_mnemonic_custom(8, wordslen, ptr0, len0);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Restore the XfrKeyPair from a mnemonic with a default bip44-path,\n* that is \"m/44'/917'/0'/0/0\" (\"m/44'/coin'/account'/change/address\").\n* @param {string} phrase\n* @returns {XfrKeyPair}\n*/\nexport function restore_keypair_from_mnemonic_default(phrase) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.restore_keypair_from_mnemonic_default(ptr0, len0);\n    return XfrKeyPair.__wrap(ret);\n}\n\n/**\n* Restore the XfrKeyPair from a mnemonic with custom params,\n* in bip44 form.\n* @param {string} phrase\n* @param {string} lang\n* @param {BipPath} path\n* @returns {XfrKeyPair}\n*/\nexport function restore_keypair_from_mnemonic_bip44(phrase, lang, path) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(lang, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    _assertClass(path, BipPath);\n    var ret = wasm.restore_keypair_from_mnemonic_bip44(ptr0, len0, ptr1, len1, path.ptr);\n    return XfrKeyPair.__wrap(ret);\n}\n\n/**\n* Restore the XfrKeyPair from a mnemonic with custom params,\n* in bip49 form.\n* @param {string} phrase\n* @param {string} lang\n* @param {BipPath} path\n* @returns {XfrKeyPair}\n*/\nexport function restore_keypair_from_mnemonic_bip49(phrase, lang, path) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(lang, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    _assertClass(path, BipPath);\n    var ret = wasm.restore_keypair_from_mnemonic_bip49(ptr0, len0, ptr1, len1, path.ptr);\n    return XfrKeyPair.__wrap(ret);\n}\n\n/**\n* ID of FRA, in `String` format.\n* @returns {string}\n*/\nexport function fra_get_asset_code() {\n    try {\n        wasm.fra_get_asset_code(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* Fee smaller than this value will be denied.\n* @returns {BigInt}\n*/\nexport function fra_get_minimal_fee() {\n    wasm.fra_get_minimal_fee(8);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    u32CvtShim[0] = r0;\n    u32CvtShim[1] = r1;\n    const n0 = uint64CvtShim[0];\n    return n0;\n}\n\n/**\n* The destination for fee to be transfered to.\n* @returns {XfrPublicKey}\n*/\nexport function fra_get_dest_pubkey() {\n    var ret = wasm.fra_get_dest_pubkey();\n    return XfrPublicKey.__wrap(ret);\n}\n\nfunction handleError(f) {\n    return function () {\n        try {\n            return f.apply(this, arguments);\n\n        } catch (e) {\n            wasm.__wbindgen_exn_store(addHeapObject(e));\n        }\n    };\n}\n/**\n* When an asset is defined, several options governing the assets must be\n* specified:\n* 1. **Traceable**: Records and identities of traceable assets can be decrypted by a provided tracing key. By defaults, assets do not have\n* any tracing policies.\n* 2. **Transferable**: Non-transferable assets can only be transferred once from the issuer to another user. By default, assets are transferable.\n* 3. **Updatable**: Whether the asset memo can be updated. By default, assets are not updatable.\n* 4. **Transfer signature rules**: Signature weights and threshold for a valid transfer. By\n*    default, there are no special signature requirements.\n* 5. **Max units**: Optional limit on the total number of units of this asset that can be issued.\n*    By default, assets do not have issuance caps.\n* @see {@link module:Findora-Wasm~TracingPolicies|TracingPolicies} for more information about tracing policies.\n* @see {@link module:Findora-Wasm~TransactionBuilder#add_operation_update_memo|add_operation_update_memo} for more information about how to add\n* a memo update operation to a transaction.\n* @see {@link module:Findora-Wasm~SignatureRules|SignatureRules} for more information about co-signatures.\n* @see {@link\n* module:Findora-Wasm~TransactionBuilder#add_operation_create_asset|add_operation_create_asset}\n* for information about how to add asset rules to an asset definition.\n*/\nexport class AssetRules {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetRules.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assetrules_free(ptr);\n    }\n    /**\n    * Create a default set of asset rules. See class description for defaults.\n    * @returns {AssetRules}\n    */\n    static new() {\n        var ret = wasm.assetrules_new();\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Adds an asset tracing policy.\n    * @param {TracingPolicy} policy - Tracing policy for the new asset.\n    * @param {TracingPolicy} policy\n    * @returns {AssetRules}\n    */\n    add_tracing_policy(policy) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(policy, TracingPolicy);\n        var ret = wasm.assetrules_add_tracing_policy(ptr, policy.ptr);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Set a cap on the number of units of this asset that can be issued.\n    * @param {BigInt} max_units - Maximum number of units that can be issued.\n    * @param {BigInt} max_units\n    * @returns {AssetRules}\n    */\n    set_max_units(max_units) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = max_units;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.assetrules_set_max_units(ptr, low0, high0);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Transferability toggle. Assets that are not transferable can only be transferred by the asset\n    * issuer.\n    * @param {boolean} transferable - Boolean indicating whether asset can be transferred.\n    * @param {boolean} transferable\n    * @returns {AssetRules}\n    */\n    set_transferable(transferable) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.assetrules_set_transferable(ptr, transferable);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * The updatable flag determines whether the asset memo can be updated after issuance.\n    * @param {boolean} updatable - Boolean indicating whether asset memo can be updated.\n    * @see {@link module:Findora-Wasm~TransactionBuilder#add_operation_update_memo|add_operation_update_memo} for more information about how to add\n    * a memo update operation to a transaction.\n    * @param {boolean} updatable\n    * @returns {AssetRules}\n    */\n    set_updatable(updatable) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.assetrules_set_updatable(ptr, updatable);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Co-signature rules. Assets with co-signatue rules require additional weighted signatures to\n    * be transferred.\n    * @param {SignatureRules} multisig_rules - Co-signature restrictions.\n    * @param {SignatureRules} multisig_rules\n    * @returns {AssetRules}\n    */\n    set_transfer_multisig_rules(multisig_rules) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(multisig_rules, SignatureRules);\n        var ptr0 = multisig_rules.ptr;\n        multisig_rules.ptr = 0;\n        var ret = wasm.assetrules_set_transfer_multisig_rules(ptr, ptr0);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Set the decimal number of asset. Return error string if failed, otherwise return changed asset.\n    * #param {Number} decimals - The number of decimals used to set its user representation.\n    * Decimals should be 0 ~ 255.\n    * @param {number} decimals\n    * @returns {AssetRules}\n    */\n    set_decimals(decimals) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.assetrules_set_decimals(ptr, decimals);\n        return AssetRules.__wrap(ret);\n    }\n}\n/**\n* Key pair used by asset tracers to decrypt asset amounts, types, and identity\n* commitments associated with traceable asset transfers.\n* @see {@link module:Findora-Wasm.TracingPolicy|TracingPolicy} for information about tracing policies.\n* @see {@link module:Findora-Wasm~AssetRules#add_tracing_policy|add_tracing_policy} for information about how to add a tracing policy to\n* an asset definition.\n*/\nexport class AssetTracerKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetTracerKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assettracerkeypair_free(ptr);\n    }\n    /**\n    * Creates a new tracer key pair.\n    * @returns {AssetTracerKeyPair}\n    */\n    static new() {\n        var ret = wasm.assettracerkeypair_new();\n        return AssetTracerKeyPair.__wrap(ret);\n    }\n}\n/**\n* Object representing an asset definition. Used to fetch tracing policies and any other\n* information that may be required to construct a valid transfer or issuance.\n*/\nexport class AssetType {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetType.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assettype_free(ptr);\n    }\n    /**\n    * Builds an asset type from a JSON-encoded JavaScript value.\n    * @param {JsValue} val - JSON-encoded asset type fetched from ledger server with the `asset_token/{code}` route.\n    * Note: The first field of an asset type is `properties`. See the example below.\n    *\n    * @example\n    * \"properties\":{\n    *   \"code\":{\n    *     \"val\":[151,8,106,38,126,101,250,236,134,77,83,180,43,152,47,57,83,30,60,8,132,218,48,52,167,167,190,244,34,45,78,80]\n    *   },\n    *   \"issuer\":{\"key\":“iFW4jY_DQVSGED05kTseBBn0BllPB9Q9escOJUpf4DY=”},\n    *   \"memo\":“test memo”,\n    *   \"asset_rules\":{\n    *     \"transferable\":true,\n    *     \"updatable\":false,\n    *     \"transfer_multisig_rules\":null,\n    *     \"max_units\":5000\n    *   }\n    * }\n    *\n    * @see {@link module:Findora-Network~Network#getAssetProperties|Network.getAsset} for information about how to\n    * fetch an asset type from the ledger server.\n    * @param {any} json\n    * @returns {AssetType}\n    */\n    static from_json(json) {\n        try {\n            var ret = wasm.assettype_from_json(addBorrowedObject(json));\n            return AssetType.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Fetch the tracing policies associated with this asset type.\n    * @returns {TracingPolicies}\n    */\n    get_tracing_policies() {\n        var ret = wasm.assettype_get_tracing_policies(this.ptr);\n        return TracingPolicies.__wrap(ret);\n    }\n}\n/**\n* Authenticated address identity registry value. Contains a proof that the AIR result is stored\n* on the ledger.\n*/\nexport class AuthenticatedAIRResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuthenticatedAIRResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_authenticatedairresult_free(ptr);\n    }\n    /**\n    * Construct an AIRResult from the JSON-encoded value returned by the ledger.\n    * @see {@link module:Findora-Network~Network#getAIRResult|Network.getAIRResult} for information about how to fetch a\n    * value from the address identity registry.\n    * @param {any} json\n    * @returns {AuthenticatedAIRResult}\n    */\n    static from_json(json) {\n        try {\n            var ret = wasm.authenticatedairresult_from_json(addBorrowedObject(json));\n            return AuthenticatedAIRResult.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns true if the authenticated AIR result proofs verify succesfully. If the proofs are\n    * valid, the identity commitment contained in the AIR result is a valid part of the ledger.\n    * @param {string} state_commitment - String representing the ledger state commitment.\n    * @param {string} state_commitment\n    * @returns {boolean}\n    */\n    is_valid(state_commitment) {\n        var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.authenticatedairresult_is_valid(this.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Returns the underlying credential commitment of the AIR result.\n    * @returns {CredentialCommitment | undefined}\n    */\n    get_commitment() {\n        var ret = wasm.authenticatedairresult_get_commitment(this.ptr);\n        return ret === 0 ? undefined : CredentialCommitment.__wrap(ret);\n    }\n}\n/**\n* Object representing an authenticable asset record. Clients can validate authentication proofs\n* against a ledger state commitment.\n*/\nexport class AuthenticatedAssetRecord {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuthenticatedAssetRecord.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_authenticatedassetrecord_free(ptr);\n    }\n    /**\n    * Given a serialized state commitment, returns true if the\n    * authenticated UTXO proofs validate correctly and false otherwise. If the proofs validate, the\n    * asset record contained in this structure exists on the ledger and is unspent.\n    * @param {string} state_commitment - String representing the state commitment.\n    * @see {@link module:Findora-Network~Network#getStateCommitment|getStateCommitment} for instructions on fetching a ledger state commitment.\n    * @throws Will throw an error if the state commitment fails to deserialize.\n    * @param {string} state_commitment\n    * @returns {boolean}\n    */\n    is_valid(state_commitment) {\n        var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.authenticatedassetrecord_is_valid(this.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Builds an AuthenticatedAssetRecord from a JSON-encoded asset record returned from the ledger\n    * server.\n    * @param {JsValue} val - JSON-encoded asset record fetched from ledger server.\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for information about how to\n    * fetch an asset record from the ledger server.\n    * @param {any} record\n    * @returns {AuthenticatedAssetRecord}\n    */\n    static from_json_record(record) {\n        try {\n            var ret = wasm.authenticatedassetrecord_from_json_record(addBorrowedObject(record));\n            return AuthenticatedAssetRecord.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n* Use this struct to express a Bip44/Bip49 path.\n*/\nexport class BipPath {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BipPath.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bippath_free(ptr);\n    }\n    /**\n    * @param {number} coin\n    * @param {number} account\n    * @param {number} change\n    * @param {number} address\n    * @returns {BipPath}\n    */\n    static new(coin, account, change, address) {\n        var ret = wasm.bippath_new(coin, account, change, address);\n        return BipPath.__wrap(ret);\n    }\n}\n/**\n* This object represents an asset record owned by a ledger key pair.\n* @see {@link module:Findora-Wasm.open_client_asset_record|open_client_asset_record} for information about how to decrypt an encrypted asset\n* record.\n*/\nexport class ClientAssetRecord {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ClientAssetRecord.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_clientassetrecord_free(ptr);\n    }\n    /**\n    * Builds a client record from a JSON-encoded JavaScript value.\n    *\n    * @param {JsValue} val - JSON-encoded autehtnicated asset record fetched from ledger server with the `utxo_sid/{sid}` route,\n    * where `sid` can be fetched from the query server with the `get_owned_utxos/{address}` route.\n    * Note: The first field of an asset record is `utxo`. See the example below.\n    *\n    * @example\n    * \"utxo\":{\n    *   \"amount\":{\n    *     \"NonConfidential\":5\n    *   },\n    *  \"asset_type\":{\n    *     \"NonConfidential\":[113,168,158,149,55,64,18,189,88,156,133,204,156,46,106,46,232,62,69,233,157,112,240,132,164,120,4,110,14,247,109,127]\n    *   },\n    *   \"public_key\":\"Glf8dKF6jAPYHzR_PYYYfzaWqpYcMvnrIcazxsilmlA=\"\n    * }\n    *\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for information about how to\n    * fetch an asset record from the ledger server.\n    * @param {any} val\n    * @returns {ClientAssetRecord}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.clientassetrecord_from_json(addBorrowedObject(val));\n            return ClientAssetRecord.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * ClientAssetRecord ==> JsValue\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.clientassetrecord_to_json(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n* Public key of a credential issuer.\n*/\nexport class CredIssuerPublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredIssuerPublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credissuerpublickey_free(ptr);\n    }\n}\n/**\n* Secret key of a credential issuer.\n*/\nexport class CredIssuerSecretKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredIssuerSecretKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credissuersecretkey_free(ptr);\n    }\n}\n/**\n* Public key of a credential user.\n*/\nexport class CredUserPublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredUserPublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_creduserpublickey_free(ptr);\n    }\n}\n/**\n* Secret key of a credential user.\n*/\nexport class CredUserSecretKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredUserSecretKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credusersecretkey_free(ptr);\n    }\n}\n/**\n* A user credential that can be used to selectively reveal credential attributes.\n* @see {@link module:Findora-Wasm.wasm_credential_commit|wasm_credential_commit} for information about how to commit to a credential.\n* @see {@link module:Findora-Wasm.wasm_credential_reveal|wasm_credential_reveal} for information about how to selectively reveal credential\n* attributes.\n*/\nexport class Credential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Credential.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credential_free(ptr);\n    }\n}\n/**\n* Commitment to a credential record.\n* @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n* credential commitment.\n*/\nexport class CredentialCommitment {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialCommitment.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialcommitment_free(ptr);\n    }\n}\n/**\n* Commitment to a credential record, proof that the commitment is valid, and credential key that can be used\n* to open a commitment.\n*/\nexport class CredentialCommitmentData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialCommitmentData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialcommitmentdata_free(ptr);\n    }\n    /**\n    * Returns the underlying credential commitment.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialCommitment}\n    */\n    get_commitment() {\n        var ret = wasm.credentialcommitmentdata_get_commitment(this.ptr);\n        return CredentialCommitment.__wrap(ret);\n    }\n    /**\n    * Returns the underlying proof of knowledge that the credential is valid.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialPoK}\n    */\n    get_pok() {\n        var ret = wasm.credentialcommitmentdata_get_pok(this.ptr);\n        return CredentialPoK.__wrap(ret);\n    }\n    /**\n    * Returns the key used to generate the commitment.\n    * @see {@link module:Findora-Wasm.wasm_credential_open_commitment|wasm_credential_open_commitment} for information about how to open a\n    * credential commitment.\n    * @returns {CredentialCommitmentKey}\n    */\n    get_commit_key() {\n        var ret = wasm.credentialcommitmentdata_get_commit_key(this.ptr);\n        return CredentialCommitmentKey.__wrap(ret);\n    }\n}\n/**\n* Key used to generate a credential commitment.\n* @see {@link module:Findora-Wasm.wasm_credential_open_commitment|wasm_credential_open_commitment} for information about how to\n* open a credential commitment.\n*/\nexport class CredentialCommitmentKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialCommitmentKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialcommitmentkey_free(ptr);\n    }\n}\n/**\n* Key pair of a credential issuer.\n*/\nexport class CredentialIssuerKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialIssuerKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialissuerkeypair_free(ptr);\n    }\n    /**\n    * Returns the credential issuer's public key.\n    * @returns {CredIssuerPublicKey}\n    */\n    get_pk() {\n        var ret = wasm.credentialissuerkeypair_get_pk(this.ptr);\n        return CredIssuerPublicKey.__wrap(ret);\n    }\n    /**\n    * Returns the credential issuer's secret key.\n    * @returns {CredIssuerSecretKey}\n    */\n    get_sk() {\n        var ret = wasm.credentialissuerkeypair_get_sk(this.ptr);\n        return CredIssuerSecretKey.__wrap(ret);\n    }\n    /**\n    * Convert the key pair to a serialized value that can be used in the browser.\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.credentialissuerkeypair_to_json(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate a key pair from a JSON-serialized JavaScript value.\n    * @param {any} val\n    * @returns {CredentialIssuerKeyPair}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.credentialissuerkeypair_from_json(addBorrowedObject(val));\n            return CredentialIssuerKeyPair.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n* Proof that a credential is a valid re-randomization of a credential signed by a certain asset\n* issuer.\n* @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n* credential commitment.\n*/\nexport class CredentialPoK {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialPoK.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialpok_free(ptr);\n    }\n}\n/**\n* Reveal signature of a credential record.\n*/\nexport class CredentialRevealSig {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialRevealSig.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialrevealsig_free(ptr);\n    }\n    /**\n    * Returns the underlying credential commitment.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialCommitment}\n    */\n    get_commitment() {\n        var ret = wasm.credentialcommitmentdata_get_commitment(this.ptr);\n        return CredentialCommitment.__wrap(ret);\n    }\n    /**\n    * Returns the underlying proof of knowledge that the credential is valid.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialPoK}\n    */\n    get_pok() {\n        var ret = wasm.credentialrevealsig_get_pok(this.ptr);\n        return CredentialPoK.__wrap(ret);\n    }\n}\n/**\n* Signature of a credential record.\n*/\nexport class CredentialSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialsignature_free(ptr);\n    }\n}\n/**\n* Key pair of a credential user.\n*/\nexport class CredentialUserKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialUserKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialuserkeypair_free(ptr);\n    }\n    /**\n    * Returns the credential issuer's public key.\n    * @returns {CredUserPublicKey}\n    */\n    get_pk() {\n        var ret = wasm.credentialuserkeypair_get_pk(this.ptr);\n        return CredUserPublicKey.__wrap(ret);\n    }\n    /**\n    * Returns the credential issuer's secret key.\n    * @returns {CredUserSecretKey}\n    */\n    get_sk() {\n        var ret = wasm.credentialuserkeypair_get_sk(this.ptr);\n        return CredUserSecretKey.__wrap(ret);\n    }\n    /**\n    * Convert the key pair to a serialized value that can be used in the browser.\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.credentialuserkeypair_to_json(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate a key pair from a JSON-serialized JavaScript value.\n    * @param {any} val\n    * @returns {CredentialUserKeyPair}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.credentialuserkeypair_from_json(addBorrowedObject(val));\n            return CredentialUserKeyPair.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n*/\nexport class FeeInputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(FeeInputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_feeinputs_free(ptr);\n    }\n    /**\n    * @returns {FeeInputs}\n    */\n    static new() {\n        var ret = wasm.feeinputs_new();\n        return FeeInputs.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} am\n    * @param {TxoRef} tr\n    * @param {ClientAssetRecord} ar\n    * @param {OwnerMemo | undefined} om\n    * @param {XfrKeyPair} kp\n    */\n    append(am, tr, ar, om, kp) {\n        uint64CvtShim[0] = am;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(tr, TxoRef);\n        var ptr1 = tr.ptr;\n        tr.ptr = 0;\n        _assertClass(ar, ClientAssetRecord);\n        var ptr2 = ar.ptr;\n        ar.ptr = 0;\n        let ptr3 = 0;\n        if (!isLikeNone(om)) {\n            _assertClass(om, OwnerMemo);\n            ptr3 = om.ptr;\n            om.ptr = 0;\n        }\n        _assertClass(kp, XfrKeyPair);\n        var ptr4 = kp.ptr;\n        kp.ptr = 0;\n        wasm.feeinputs_append(this.ptr, low0, high0, ptr1, ptr2, ptr3, ptr4);\n    }\n    /**\n    * @param {BigInt} am\n    * @param {TxoRef} tr\n    * @param {ClientAssetRecord} ar\n    * @param {OwnerMemo | undefined} om\n    * @param {XfrKeyPair} kp\n    * @returns {FeeInputs}\n    */\n    append2(am, tr, ar, om, kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = am;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(tr, TxoRef);\n        var ptr1 = tr.ptr;\n        tr.ptr = 0;\n        _assertClass(ar, ClientAssetRecord);\n        var ptr2 = ar.ptr;\n        ar.ptr = 0;\n        let ptr3 = 0;\n        if (!isLikeNone(om)) {\n            _assertClass(om, OwnerMemo);\n            ptr3 = om.ptr;\n            om.ptr = 0;\n        }\n        _assertClass(kp, XfrKeyPair);\n        var ptr4 = kp.ptr;\n        kp.ptr = 0;\n        var ret = wasm.feeinputs_append2(ptr, low0, high0, ptr1, ptr2, ptr3, ptr4);\n        return FeeInputs.__wrap(ret);\n    }\n}\n/**\n* Blinding factor for a custom data operation. A blinding factor adds a random value to the\n* custom data being hashed to make the hash hiding.\n*/\nexport class KVBlind {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KVBlind.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kvblind_free(ptr);\n    }\n    /**\n    * Generate a random blinding factor.\n    * @returns {KVBlind}\n    */\n    static gen_random() {\n        var ret = wasm.kvblind_gen_random();\n        return KVBlind.__wrap(ret);\n    }\n    /**\n    * Convert the key pair to a JSON-encoded value that can be used in the browser.\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.kvblind_to_json(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a KVBlind from a JSON-encoded value.\n    * @param {any} val\n    * @returns {KVBlind}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.kvblind_from_json(addBorrowedObject(val));\n            return KVBlind.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n* Hash that can be stored in the ledger's custom data store.\n*/\nexport class KVHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KVHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kvhash_free(ptr);\n    }\n    /**\n    * Generate a new custom data hash without a blinding factor.\n    * @param {JsValue} data - Data to hash. Must be an array of bytes.\n    * @param {any} data\n    * @returns {KVHash}\n    */\n    static new_no_blind(data) {\n        try {\n            var ret = wasm.kvhash_new_no_blind(addBorrowedObject(data));\n            return KVHash.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Generate a new custom data hash with a blinding factor.\n    * @param {JsValue} data - Data to hash. Must be an array of bytes.\n    * @param {KVBlind} kv_blind - Optional blinding factor.\n    * @param {any} data\n    * @param {KVBlind} kv_blind\n    * @returns {KVHash}\n    */\n    static new_with_blind(data, kv_blind) {\n        try {\n            _assertClass(kv_blind, KVBlind);\n            var ret = wasm.kvhash_new_with_blind(addBorrowedObject(data), kv_blind.ptr);\n            return KVHash.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\n/**\n* Key for hashes in the ledger's custom data store.\n*/\nexport class Key {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Key.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_key_free(ptr);\n    }\n    /**\n    * Generate a random key.\n    * Figure out how to store prng ref in browser: https://bugtracker.findora.org/issues/63\n    * @returns {Key}\n    */\n    static gen_random() {\n        var ret = wasm.key_gen_random();\n        return Key.__wrap(ret);\n    }\n    /**\n    * Returns a base64 encoded version of the Key.\n    * @returns {string}\n    */\n    to_base64() {\n        try {\n            wasm.key_to_base64(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Generates a Key from a base64-encoded String.\n    * @param {string} string\n    * @returns {Key}\n    */\n    static from_base64(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.key_from_base64(ptr0, len0);\n        return Key.__wrap(ret);\n    }\n}\n/**\n* Asset owner memo. Contains information needed to decrypt an asset record.\n* @see {@link module:Findora-Wasm.ClientAssetRecord|ClientAssetRecord} for more details about asset records.\n*/\nexport class OwnerMemo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OwnerMemo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ownermemo_free(ptr);\n    }\n    /**\n    * Builds an owner memo from a JSON-serialized JavaScript value.\n    * @param {JsValue} val - JSON owner memo fetched from query server with the `get_owner_memo/{sid}` route,\n    * where `sid` can be fetched from the query server with the `get_owned_utxos/{address}` route. See the example below.\n    *\n    * @example\n    * {\n    *   \"blind_share\":[91,251,44,28,7,221,67,155,175,213,25,183,70,90,119,232,212,238,226,142,159,200,54,19,60,115,38,221,248,202,74,248],\n    *   \"lock\":{\"ciphertext\":[119,54,117,136,125,133,112,193],\"encoded_rand\":\"8KDql2JphPB5WLd7-aYE1bxTQAcweFSmrqymLvPDntM=\"}\n    * }\n    * @param {any} val\n    * @returns {OwnerMemo}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.ownermemo_from_json(addBorrowedObject(val));\n            return OwnerMemo.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Creates a clone of the owner memo.\n    * @returns {OwnerMemo}\n    */\n    clone() {\n        var ret = wasm.ownermemo_clone(this.ptr);\n        return OwnerMemo.__wrap(ret);\n    }\n}\n/**\n* Public parameters necessary for generating asset records. Generating this is expensive and\n* should be done as infrequently as possible.\n* @see {@link module:Findora-Wasm~TransactionBuilder#add_basic_issue_asset|add_basic_issue_asset}\n* for information using public parameters to create issuance asset records.\n*/\nexport class PublicParams {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicParams.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_publicparams_free(ptr);\n    }\n    /**\n    * Generates a new set of parameters.\n    * @returns {PublicParams}\n    */\n    static new() {\n        var ret = wasm.publicparams_new();\n        return PublicParams.__wrap(ret);\n    }\n}\n/**\n* Stores threshold and weights for a multisignature requirement.\n*/\nexport class SignatureRules {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SignatureRules.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_signaturerules_free(ptr);\n    }\n    /**\n    * Creates a new set of co-signature rules.\n    *\n    * @param {BigInt} threshold - Minimum sum of signature weights that is required for an asset\n    * transfer.\n    * @param {JsValue} weights - Array of public key weights of the form `[[\"kAb...\", BigInt(5)]]', where the\n    * first element of each tuple is a base64 encoded public key and the second is the key's\n    * associated weight.\n    * @param {BigInt} threshold\n    * @param {any} weights\n    * @returns {SignatureRules}\n    */\n    static new(threshold, weights) {\n        uint64CvtShim[0] = threshold;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.signaturerules_new(low0, high0, addHeapObject(weights));\n        return SignatureRules.__wrap(ret);\n    }\n}\n/**\n* A collection of tracing policies. Use this object when constructing asset transfers to generate\n* the correct tracing proofs for traceable assets.\n*/\nexport class TracingPolicies {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TracingPolicies.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_tracingpolicies_free(ptr);\n    }\n}\n/**\n* Tracing policy for asset transfers. Can be configured to track credentials, the asset type and\n* amount, or both.\n*/\nexport class TracingPolicy {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TracingPolicy.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_tracingpolicy_free(ptr);\n    }\n    /**\n    * @param {AssetTracerKeyPair} tracing_key\n    * @returns {TracingPolicy}\n    */\n    static new_with_tracing(tracing_key) {\n        _assertClass(tracing_key, AssetTracerKeyPair);\n        var ret = wasm.tracingpolicy_new_with_tracing(tracing_key.ptr);\n        return TracingPolicy.__wrap(ret);\n    }\n    /**\n    * @param {AssetTracerKeyPair} tracing_key\n    * @param {CredIssuerPublicKey} cred_issuer_key\n    * @param {any} reveal_map\n    * @param {boolean} tracing\n    * @returns {TracingPolicy}\n    */\n    static new_with_identity_tracing(tracing_key, cred_issuer_key, reveal_map, tracing) {\n        _assertClass(tracing_key, AssetTracerKeyPair);\n        _assertClass(cred_issuer_key, CredIssuerPublicKey);\n        var ret = wasm.tracingpolicy_new_with_identity_tracing(tracing_key.ptr, cred_issuer_key.ptr, addHeapObject(reveal_map), tracing);\n        return TracingPolicy.__wrap(ret);\n    }\n}\n/**\n* Structure that allows users to construct arbitrary transactions.\n*/\nexport class TransactionBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * @param am: amount to pay\n    * @param kp: owner's XfrKeyPair\n    * @param {BigInt} am\n    * @param {XfrKeyPair} kp\n    * @returns {TransactionBuilder}\n    */\n    add_fee_relative_auto(am, kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = am;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(kp, XfrKeyPair);\n        var ptr1 = kp.ptr;\n        kp.ptr = 0;\n        var ret = wasm.transactionbuilder_add_fee_relative_auto(ptr, low0, high0, ptr1);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Use this func to get the necessary infomations for generating `Relative Inputs`\n    *\n    * - TxoRef::Relative(\"Element index of the result\")\n    * - ClientAssetRecord::from_json(\"Element of the result\")\n    * @returns {any[]}\n    */\n    get_relative_outputs() {\n        wasm.transactionbuilder_get_relative_outputs(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v0;\n    }\n    /**\n    * As the last operation of any transaction,\n    * add a static fee to the transaction.\n    * @param {FeeInputs} inputs\n    * @returns {TransactionBuilder}\n    */\n    add_fee(inputs) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(inputs, FeeInputs);\n        var ptr0 = inputs.ptr;\n        inputs.ptr = 0;\n        var ret = wasm.transactionbuilder_add_fee(ptr, ptr0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * A simple fee checker for mainnet v1.0.\n    *\n    * SEE [check_fee](ledger::data_model::Transaction::check_fee)\n    * @returns {boolean}\n    */\n    check_fee() {\n        var ret = wasm.transactionbuilder_check_fee(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Create a new transaction builder.\n    * @param {BigInt} seq_id - Unique sequence ID to prevent replay attacks.\n    * @param {BigInt} seq_id\n    * @returns {TransactionBuilder}\n    */\n    static new(seq_id) {\n        uint64CvtShim[0] = seq_id;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.transactionbuilder_new(low0, high0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransactionBuilder to add an asset definition operation to a transaction builder instance.\n    * @example <caption> Error handling </caption>\n    * try {\n    *     await wasm.add_operation_create_asset(wasm.new_keypair(), \"test_memo\", wasm.random_asset_type(), wasm.AssetRules.default());\n    * } catch (err) {\n    *     console.log(err)\n    * }\n    *\n    * @param {XfrKeyPair} key_pair -  Issuer XfrKeyPair.\n    * @param {string} memo - Text field for asset definition.\n    * @param {string} token_code - Optional Base64 string representing the token code of the asset to be issued.\n    * If empty, a token code will be chosen at random.\n    * @param {AssetRules} asset_rules - Asset rules object specifying which simple policies apply\n    * to the asset.\n    * @param {XfrKeyPair} key_pair\n    * @param {string} memo\n    * @param {string} token_code\n    * @param {AssetRules} asset_rules\n    * @returns {TransactionBuilder}\n    */\n    add_operation_create_asset(key_pair, memo, token_code, asset_rules) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(memo, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(token_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        _assertClass(asset_rules, AssetRules);\n        var ptr2 = asset_rules.ptr;\n        asset_rules.ptr = 0;\n        var ret = wasm.transactionbuilder_add_operation_create_asset(ptr, key_pair.ptr, ptr0, len0, ptr1, len1, ptr2);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @ignore\n    * @param {XfrKeyPair} key_pair\n    * @param {string} memo\n    * @param {string} token_code\n    * @param {string} policy_choice\n    * @param {AssetRules} asset_rules\n    * @returns {TransactionBuilder}\n    */\n    add_operation_create_asset_with_policy(key_pair, memo, token_code, policy_choice, asset_rules) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(memo, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(token_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(policy_choice, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        _assertClass(asset_rules, AssetRules);\n        var ptr3 = asset_rules.ptr;\n        asset_rules.ptr = 0;\n        var ret = wasm.transactionbuilder_add_operation_create_asset_with_policy(ptr, key_pair.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @ignore\n    * @param {string} token_code\n    * @param {string} which_check\n    * @returns {TransactionBuilder}\n    */\n    add_policy_option(token_code, which_check) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ptr0 = passStringToWasm0(token_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(which_check, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbuilder_add_policy_option(ptr, ptr0, len0, ptr1, len1);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransactionBuilder to add an asset issuance to a transaction builder instance.\n    *\n    * Use this function for simple one-shot issuances.\n    *\n    * @param {XfrKeyPair} key_pair  - Issuer XfrKeyPair.\n    * and types of traced assets.\n    * @param {string} code - base64 string representing the token code of the asset to be issued.\n    * @param {BigInt} seq_num - Issuance sequence number. Every subsequent issuance of a given asset type must have a higher sequence number than before.\n    * @param {BigInt} amount - Amount to be issued.\n    * @param {boolean} conf_amount - `true` means the asset amount is confidential, and `false` means it's nonconfidential.\n    * @param {PublicParams} zei_params - Public parameters necessary to generate asset records.\n    * @param {XfrKeyPair} key_pair\n    * @param {string} code\n    * @param {BigInt} seq_num\n    * @param {BigInt} amount\n    * @param {boolean} conf_amount\n    * @param {PublicParams} zei_params\n    * @returns {TransactionBuilder}\n    */\n    add_basic_issue_asset(key_pair, code, seq_num, amount, conf_amount, zei_params) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        uint64CvtShim[0] = seq_num;\n        const low1 = u32CvtShim[0];\n        const high1 = u32CvtShim[1];\n        uint64CvtShim[0] = amount;\n        const low2 = u32CvtShim[0];\n        const high2 = u32CvtShim[1];\n        _assertClass(zei_params, PublicParams);\n        var ret = wasm.transactionbuilder_add_basic_issue_asset(ptr, key_pair.ptr, ptr0, len0, low1, high1, low2, high2, conf_amount, zei_params.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that appends a credential commitment to the address\n    * identity registry.\n    * @param {XfrKeyPair} key_pair - Ledger key that is tied to the credential.\n    * @param {CredUserPublicKey} user_public_key - Public key of the credential user.\n    * @param {CredIssuerPublicKey} issuer_public_key - Public key of the credential issuer.\n    * @param {CredentialCommitment} commitment - Credential commitment to add to the address identity registry.\n    * @param {CredPoK} pok- Proof that the credential commitment is valid.\n    * @see {@link module:Findora-Wasm.wasm_credential_commit|wasm_credential_commit} for information about how to generate a credential\n    * commitment.\n    * @param {XfrKeyPair} key_pair\n    * @param {CredUserPublicKey} user_public_key\n    * @param {CredIssuerPublicKey} issuer_public_key\n    * @param {CredentialCommitment} commitment\n    * @param {CredentialPoK} pok\n    * @returns {TransactionBuilder}\n    */\n    add_operation_air_assign(key_pair, user_public_key, issuer_public_key, commitment, pok) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        _assertClass(user_public_key, CredUserPublicKey);\n        _assertClass(issuer_public_key, CredIssuerPublicKey);\n        _assertClass(commitment, CredentialCommitment);\n        _assertClass(pok, CredentialPoK);\n        var ret = wasm.transactionbuilder_add_operation_air_assign(ptr, key_pair.ptr, user_public_key.ptr, issuer_public_key.ptr, commitment.ptr, pok.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that removes a hash from ledger's custom data\n    * store.\n    * @param {XfrKeyPair} auth_key_pair - Key pair that is authorized to delete the hash at the\n    * provided key.\n    * @param {Key} key - The key of the custom data store whose value will be cleared if the\n    * transaction validates.\n    * @param {BigInt} seq_num - Nonce to prevent replays.\n    * @param {XfrKeyPair} auth_key_pair\n    * @param {Key} key\n    * @param {BigInt} seq_num\n    * @returns {TransactionBuilder}\n    */\n    add_operation_kv_update_no_hash(auth_key_pair, key, seq_num) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(auth_key_pair, XfrKeyPair);\n        _assertClass(key, Key);\n        uint64CvtShim[0] = seq_num;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.transactionbuilder_add_operation_kv_update_no_hash(ptr, auth_key_pair.ptr, key.ptr, low0, high0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that adds a hash to the ledger's custom data\n    * store.\n    * @param {XfrKeyPair} auth_key_pair - Key pair that is authorized to add the hash at the\n    * provided key.\n    * @param {Key} key - The key of the custom data store the value will be added to if the\n    * transaction validates.\n    * @param {KVHash} hash - The hash to add to the custom data store.\n    * @param {BigInt} seq_num - Nonce to prevent replays.\n    * @param {XfrKeyPair} auth_key_pair\n    * @param {Key} key\n    * @param {BigInt} seq_num\n    * @param {KVHash} kv_hash\n    * @returns {TransactionBuilder}\n    */\n    add_operation_kv_update_with_hash(auth_key_pair, key, seq_num, kv_hash) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(auth_key_pair, XfrKeyPair);\n        _assertClass(key, Key);\n        uint64CvtShim[0] = seq_num;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(kv_hash, KVHash);\n        var ret = wasm.transactionbuilder_add_operation_kv_update_with_hash(ptr, auth_key_pair.ptr, key.ptr, low0, high0, kv_hash.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that adds a hash to the ledger's custom data\n    * store.\n    * @param {XfrKeyPair} auth_key_pair - Asset creator key pair.\n    * @param {String} code - base64 string representing token code of the asset whose memo will be updated.\n    * transaction validates.\n    * @param {String} new_memo - The new asset memo.\n    * @see {@link module:Findora-Wasm~AssetRules#set_updatable|AssetRules.set_updatable} for more information about how\n    * to define an updatable asset.\n    * @param {XfrKeyPair} auth_key_pair\n    * @param {string} code\n    * @param {string} new_memo\n    * @returns {TransactionBuilder}\n    */\n    add_operation_update_memo(auth_key_pair, code, new_memo) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(auth_key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(new_memo, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbuilder_add_operation_update_memo(ptr, auth_key_pair.ptr, ptr0, len0, ptr1, len1);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds a serialized transfer asset operation to a transaction builder instance.\n    * @param {string} op - a JSON-serialized transfer operation.\n    * @see {@link module:Findora-Wasm~TransferOperationBuilder} for details on constructing a transfer operation.\n    * @throws Will throw an error if `op` fails to deserialize.\n    * @param {string} op\n    * @returns {TransactionBuilder}\n    */\n    add_transfer_operation(op) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ptr0 = passStringToWasm0(op, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbuilder_add_transfer_operation(ptr, ptr0, len0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @param {XfrKeyPair} kp\n    * @returns {TransactionBuilder}\n    */\n    sign(kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(kp, XfrKeyPair);\n        var ret = wasm.transactionbuilder_sign(ptr, kp.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Extracts the serialized form of a transaction.\n    * @returns {string}\n    */\n    transaction() {\n        try {\n            wasm.transactionbuilder_transaction(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Calculates transaction handle.\n    * @returns {string}\n    */\n    transaction_handle() {\n        try {\n            wasm.transactionbuilder_transaction_handle(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Fetches a client record from a transaction.\n    * @param {number} idx - Record to fetch. Records are added to the transaction builder sequentially.\n    * @param {number} idx\n    * @returns {ClientAssetRecord}\n    */\n    get_owner_record(idx) {\n        var ret = wasm.transactionbuilder_get_owner_record(this.ptr, idx);\n        return ClientAssetRecord.__wrap(ret);\n    }\n    /**\n    * Fetches an owner memo from a transaction\n    * @param {number} idx - Owner memo to fetch. Owner memos are added to the transaction builder sequentially.\n    * @param {number} idx\n    * @returns {OwnerMemo | undefined}\n    */\n    get_owner_memo(idx) {\n        var ret = wasm.transactionbuilder_get_owner_memo(this.ptr, idx);\n        return ret === 0 ? undefined : OwnerMemo.__wrap(ret);\n    }\n}\n/**\n* Structure that enables clients to construct complex transfers.\n*/\nexport class TransferOperationBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransferOperationBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transferoperationbuilder_free(ptr);\n    }\n    /**\n    * Create a new transfer operation builder.\n    * @returns {TransferOperationBuilder}\n    */\n    static new() {\n        var ret = wasm.transferoperationbuilder_new();\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * @ignore\n    * @returns {string}\n    */\n    debug() {\n        try {\n            wasm.transferoperationbuilder_debug(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an input to a transfer operation builder.\n    * @param {TxoRef} txo_ref - Absolute or relative utxo reference\n    * @param {string} asset_record - Serialized client asset record to serve as transfer input. This record must exist on the\n    * ledger for the transfer to be valid.\n    * @param {OwnerMemo} owner_memo - Opening parameters.\n    * @param tracing_key {AssetTracerKeyPair} - Tracing key, must be added to traceable\n    * assets.\n    * @param {XfrKeyPair} key - Key pair associated with the input.\n    * @param {BigInt} amount - Amount of input record to transfer.\n    * @see {@link module:Findora-Wasm~TxoRef#create_absolute_txo_ref|TxoRef.create_absolute_txo_ref}\n    * or {@link module:Findora-Wasm~TxoRef#create_relative_txo_ref|TxoRef.create_relative_txo_ref} for details on txo\n    * references.\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for details on fetching blind asset records.\n    * @throws Will throw an error if `oar` or `txo_ref` fail to deserialize.\n    * @param {TxoRef} txo_ref\n    * @param {ClientAssetRecord} asset_record\n    * @param {OwnerMemo | undefined} owner_memo\n    * @param {TracingPolicies} tracing_policies\n    * @param {XfrKeyPair} key\n    * @param {BigInt} amount\n    * @returns {TransferOperationBuilder}\n    */\n    add_input_with_tracing(txo_ref, asset_record, owner_memo, tracing_policies, key, amount) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(txo_ref, TxoRef);\n        var ptr0 = txo_ref.ptr;\n        txo_ref.ptr = 0;\n        _assertClass(asset_record, ClientAssetRecord);\n        var ptr1 = asset_record.ptr;\n        asset_record.ptr = 0;\n        let ptr2 = 0;\n        if (!isLikeNone(owner_memo)) {\n            _assertClass(owner_memo, OwnerMemo);\n            ptr2 = owner_memo.ptr;\n            owner_memo.ptr = 0;\n        }\n        _assertClass(tracing_policies, TracingPolicies);\n        _assertClass(key, XfrKeyPair);\n        uint64CvtShim[0] = amount;\n        const low3 = u32CvtShim[0];\n        const high3 = u32CvtShim[1];\n        var ret = wasm.transferoperationbuilder_add_input_with_tracing(ptr, ptr0, ptr1, ptr2, tracing_policies.ptr, key.ptr, low3, high3);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an input to a transfer operation builder.\n    * @param {TxoRef} txo_ref - Absolute or relative utxo reference\n    * @param {string} asset_record - Serialized client asset record to serve as transfer input. This record must exist on the\n    * ledger for the transfer to be valid\n    * @param {OwnerMemo} owner_memo - Opening parameters.\n    * @param {XfrKeyPair} key - Key pair associated with the input.\n    * @param {BigInt} amount - Amount of input record to transfer\n    * or {@link module:Findora-Wasm~TxoRef#create_relative_txo_ref|TxoRef.create_relative_txo_ref} for details on txo\n    * references.\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for details on fetching blind asset records.\n    * @throws Will throw an error if `oar` or `txo_ref` fail to deserialize.\n    * @param {TxoRef} txo_ref\n    * @param {ClientAssetRecord} asset_record\n    * @param {OwnerMemo | undefined} owner_memo\n    * @param {XfrKeyPair} key\n    * @param {BigInt} amount\n    * @returns {TransferOperationBuilder}\n    */\n    add_input_no_tracing(txo_ref, asset_record, owner_memo, key, amount) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(txo_ref, TxoRef);\n        var ptr0 = txo_ref.ptr;\n        txo_ref.ptr = 0;\n        _assertClass(asset_record, ClientAssetRecord);\n        let ptr1 = 0;\n        if (!isLikeNone(owner_memo)) {\n            _assertClass(owner_memo, OwnerMemo);\n            ptr1 = owner_memo.ptr;\n            owner_memo.ptr = 0;\n        }\n        _assertClass(key, XfrKeyPair);\n        uint64CvtShim[0] = amount;\n        const low2 = u32CvtShim[0];\n        const high2 = u32CvtShim[1];\n        var ret = wasm.transferoperationbuilder_add_input_no_tracing(ptr, ptr0, asset_record.ptr, ptr1, key.ptr, low2, high2);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an output to a transfer operation builder.\n    *\n    * @param {BigInt} amount - amount to transfer to the recipient.\n    * @param {XfrPublicKey} recipient - public key of the recipient.\n    * @param tracing_key {AssetTracerKeyPair} - Optional tracing key, must be added to traced\n    * assets.\n    * @param code {string} - String representation of the asset token code.\n    * @param conf_amount {boolean} - `true` means the output's asset amount is confidential, and `false` means it's nonconfidential.\n    * @param conf_type {boolean} - `true` means the output's asset type is confidential, and `false` means it's nonconfidential.\n    * @throws Will throw an error if `code` fails to deserialize.\n    * @param {BigInt} amount\n    * @param {XfrPublicKey} recipient\n    * @param {TracingPolicies} tracing_policies\n    * @param {string} code\n    * @param {boolean} conf_amount\n    * @param {boolean} conf_type\n    * @returns {TransferOperationBuilder}\n    */\n    add_output_with_tracing(amount, recipient, tracing_policies, code, conf_amount, conf_type) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = amount;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(recipient, XfrPublicKey);\n        _assertClass(tracing_policies, TracingPolicies);\n        var ptr1 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transferoperationbuilder_add_output_with_tracing(ptr, low0, high0, recipient.ptr, tracing_policies.ptr, ptr1, len1, conf_amount, conf_type);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an output to a transfer operation builder.\n    *\n    * @param {BigInt} amount - amount to transfer to the recipient\n    * @param {XfrPublicKey} recipient - public key of the recipient\n    * @param code {string} - String representaiton of the asset token code\n    * @param conf_amount {boolean} - `true` means the output's asset amount is confidential, and `false` means it's nonconfidential.\n    * @param conf_type {boolean} - `true` means the output's asset type is confidential, and `false` means it's nonconfidential.\n    * @throws Will throw an error if `code` fails to deserialize.\n    * @param {BigInt} amount\n    * @param {XfrPublicKey} recipient\n    * @param {string} code\n    * @param {boolean} conf_amount\n    * @param {boolean} conf_type\n    * @returns {TransferOperationBuilder}\n    */\n    add_output_no_tracing(amount, recipient, code, conf_amount, conf_type) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = amount;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(recipient, XfrPublicKey);\n        var ptr1 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transferoperationbuilder_add_output_no_tracing(ptr, low0, high0, recipient.ptr, ptr1, len1, conf_amount, conf_type);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to ensure the transfer inputs and outputs are balanced.\n    * This function will add change outputs for all unspent portions of input records.\n    * @throws Will throw an error if the transaction cannot be balanced.\n    * @returns {TransferOperationBuilder}\n    */\n    balance() {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.transferoperationbuilder_balance(ptr);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to finalize the transaction.\n    *\n    * @throws Will throw an error if input and output amounts do not add up.\n    * @throws Will throw an error if not all record owners have signed the transaction.\n    * @returns {TransferOperationBuilder}\n    */\n    create() {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.transferoperationbuilder_create(ptr);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add a signature to the operation.\n    *\n    * All input owners must sign.\n    *\n    * @param {XfrKeyPair} kp - key pair of one of the input owners.\n    * @param {XfrKeyPair} kp\n    * @returns {TransferOperationBuilder}\n    */\n    sign(kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(kp, XfrKeyPair);\n        var ret = wasm.transferoperationbuilder_sign(ptr, kp.ptr);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Co-sign an input index\n    * @param {XfrKeyPair} kp - Co-signature key.\n    * @params {Number} input_idx - Input index to apply co-signature to.\n    * @param {XfrKeyPair} kp\n    * @param {number} input_idx\n    * @returns {TransferOperationBuilder}\n    */\n    add_cosignature(kp, input_idx) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(kp, XfrKeyPair);\n        var ret = wasm.transferoperationbuilder_add_cosignature(ptr, kp.ptr, input_idx);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    builder() {\n        try {\n            wasm.transferoperationbuilder_builder(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Wraps around TransferOperationBuilder to extract an operation expression as JSON.\n    * @returns {string}\n    */\n    transaction() {\n        try {\n            wasm.transferoperationbuilder_transaction(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n* Indicates whether the TXO ref is an absolute or relative value.\n*/\nexport class TxoRef {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TxoRef.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_txoref_free(ptr);\n    }\n    /**\n    * Creates a relative txo reference as a JSON string. Relative txo references are offset\n    * backwards from the operation they appear in -- 0 is the most recent, (n-1) is the first output\n    * of the transaction.\n    *\n    * Use relative txo indexing when referring to outputs of intermediate operations (e.g. a\n    * transaction containing both an issuance and a transfer).\n    *\n    * # Arguments\n    * @param {BigInt} idx -  Relative TXO (transaction output) SID.\n    * @param {BigInt} idx\n    * @returns {TxoRef}\n    */\n    static relative(idx) {\n        uint64CvtShim[0] = idx;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.txoref_relative(low0, high0);\n        return TxoRef.__wrap(ret);\n    }\n    /**\n    * Creates an absolute transaction reference as a JSON string.\n    *\n    * Use absolute txo indexing when referring to an output that has been assigned a utxo index (i.e.\n    * when the utxo has been committed to the ledger in an earlier transaction).\n    *\n    * # Arguments\n    * @param {BigInt} idx -  Txo (transaction output) SID.\n    * @param {BigInt} idx\n    * @returns {TxoRef}\n    */\n    static absolute(idx) {\n        uint64CvtShim[0] = idx;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.txoref_absolute(low0, high0);\n        return TxoRef.__wrap(ret);\n    }\n}\n/**\n*/\nexport class XfrKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(XfrKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_xfrkeypair_free(ptr);\n    }\n    /**\n    * @returns {XfrPublicKey}\n    */\n    get pub_key() {\n        var ret = wasm.__wbg_get_xfrkeypair_pub_key(this.ptr);\n        return XfrPublicKey.__wrap(ret);\n    }\n    /**\n    * @param {XfrPublicKey} arg0\n    */\n    set pub_key(arg0) {\n        _assertClass(arg0, XfrPublicKey);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_xfrkeypair_pub_key(this.ptr, ptr0);\n    }\n}\n/**\n*/\nexport class XfrPublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(XfrPublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_xfrpublickey_free(ptr);\n    }\n}\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbindgen_json_serialize = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = JSON.stringify(obj === undefined ? null : obj);\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_json_parse = function(arg0, arg1) {\n    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_getRandomValues_57e4008f45f0e105 = handleError(function(arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n});\n\nexport const __wbg_randomFillSync_d90848a552cbd666 = handleError(function(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n});\n\nexport const __wbg_self_f865985e662246aa = handleError(function() {\n    var ret = self.self;\n    return addHeapObject(ret);\n});\n\nexport const __wbg_static_accessor_MODULE_39947eb3fe77895f = function() {\n    var ret = module;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_require_c59851dfa0dc7e78 = handleError(function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n});\n\nexport const __wbg_crypto_bfb05100db79193b = function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_msCrypto_f6dddc6ae048b7e2 = function(arg0) {\n    var ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nexport const __wbg_self_86b4b13392c7af56 = handleError(function() {\n    var ret = self.self;\n    return addHeapObject(ret);\n});\n\nexport const __wbg_static_accessor_MODULE_452b4680e8614c81 = function() {\n    var ret = module;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_require_f5521a5b85ad2542 = function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_crypto_b8c92eaac23d0d80 = function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_msCrypto_9ad6677321a08dd8 = function(arg0) {\n    var ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_getRandomValues_dd27e6b0652b3236 = function(arg0) {\n    var ret = getObject(arg0).getRandomValues;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_getRandomValues_e57c9b75ddead065 = function(arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n};\n\nexport const __wbg_randomFillSync_d2ba53160aec6aba = function(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nexport const __wbg_buffer_eb5185aa4a8e9c62 = function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_length_2e324c9c0e74a81d = function(arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\n\nexport const __wbg_new_3d94e83f0a6bf252 = function(arg0) {\n    var ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport const __wbg_set_d4d7629a896d4b3e = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nexport const __wbg_newwithlength_02a009c0728d3ba1 = function(arg0) {\n    var ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_subarray_cc54babc55409ee0 = function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\nexport const __wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"],"sourceRoot":""}