{"version":3,"sources":["webpack://Terra/./node_modules/findora-wallet-wasm/nodejs/wasm.js","webpack://Terra/./node_modules/path-browserify/index.js"],"names":["wasm","imports","module","exports","TextDecoder","String","raw","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","WASM_VECTOR_LEN","cachegetNodeBufferMemory0","passStringToWasm0","arg","malloc","len","Buffer","byteLength","ptr","buffer","memory","from","write","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","Uint8Array","getStringFromWasm0","subarray","addHeapObject","obj","debugString","val","type","description","name","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","Error","message","stack","u32CvtShim","Uint32Array","uint64CvtShim","BigUint64Array","stack_pointer","addBorrowedObject","_assertClass","instance","klass","isLikeNone","x","build_id","r0","r1","__wbindgen_free","random_asset_type","asset_type_from_jsvalue","verify_authenticated_txn","state_commitment","authenticated_txn","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","ptr1","len1","verify_authenticated_custom_data_result","authenticated_res","calculate_fee","ir_numerator","ir_denominator","outstanding_balance","low0","high0","low1","high1","low2","high2","get_null_pk","XfrPublicKey","__wrap","create_default_policy_info","create_debt_policy_info","fiat_code","loan_amount","ptr2","len2","low3","high3","create_debt_memo","cachegetUint32Memory0","getArrayU8FromWasm0","handleError","f","apply","this","arguments","e","__wbindgen_exn_store","open_client_asset_record","record","owner_memo","keypair","ClientAssetRecord","OwnerMemo","XfrKeyPair","get_pub_key_str","key_pair","get_priv_key_str","new_keypair","new_keypair_from_seed","seed_str","public_key_to_base64","key","public_key_from_base64","pk","keypair_to_str","keypair_from_str","str","wasm_credential_issuer_key_gen","attributes","CredentialIssuerKeyPair","wasm_credential_verify_commitment","issuer_pub_key","commitment","pok","xfr_pk","CredIssuerPublicKey","CredentialCommitment","CredentialPoK","wasm_credential_open_commitment","user_secret_key","credential","reveal_fields","CredUserSecretKey","Credential","CredentialCommitmentKey","wasm_credential_user_key_gen","CredentialUserKeyPair","wasm_credential_sign","issuer_secret_key","user_public_key","CredIssuerSecretKey","CredUserPublicKey","CredentialSignature","create_credential","issuer_public_key","signature","wasm_credential_commit","CredentialCommitmentData","wasm_credential_reveal","user_sk","CredentialRevealSig","wasm_credential_verify","trace_assets","xfr_body","tracer_keypair","_candidate_assets","AssetTracerKeyPair","public_key_to_bech32","public_key_from_bech32","addr","bech32_to_base64","base64_to_bech32","encryption_pbkdf2_aes256gcm","password","v2","slice","decryption_pbkdf2_aes256gcm","enc_key_pair","set","passArray8ToWasm0","create_keypair_from_secret","sk_str","get_pk_from_keypair","kp","generate_mnemonic_default","generate_mnemonic_custom","wordslen","lang","restore_keypair_from_mnemonic_default","phrase","restore_keypair_from_mnemonic_bip44","path","BipPath","restore_keypair_from_mnemonic_bip49","fra_get_asset_code","fra_get_minimal_fee","fra_get_dest_pubkey","AssetRules","Object","create","prototype","__wbg_assetrules_free","assetrules_new","policy","TracingPolicy","assetrules_add_tracing_policy","max_units","assetrules_set_max_units","transferable","assetrules_set_transferable","updatable","assetrules_set_updatable","multisig_rules","SignatureRules","assetrules_set_transfer_multisig_rules","decimals","assetrules_set_decimals","__wbg_assettracerkeypair_free","assettracerkeypair_new","AssetType","__wbg_assettype_free","json","assettype_from_json","assettype_get_tracing_policies","TracingPolicies","AuthenticatedAIRResult","__wbg_authenticatedairresult_free","authenticatedairresult_from_json","authenticatedairresult_is_valid","authenticatedairresult_get_commitment","AuthenticatedAssetRecord","__wbg_authenticatedassetrecord_free","authenticatedassetrecord_is_valid","authenticatedassetrecord_from_json_record","__wbg_bippath_free","coin","account","change","address","bippath_new","__wbg_clientassetrecord_free","clientassetrecord_from_json","clientassetrecord_to_json","__wbg_credissuerpublickey_free","__wbg_credissuersecretkey_free","__wbg_creduserpublickey_free","__wbg_credusersecretkey_free","__wbg_credential_free","__wbg_credentialcommitment_free","__wbg_credentialcommitmentdata_free","credentialcommitmentdata_get_commitment","credentialcommitmentdata_get_pok","credentialcommitmentdata_get_commit_key","__wbg_credentialcommitmentkey_free","__wbg_credentialissuerkeypair_free","credentialissuerkeypair_get_pk","credentialissuerkeypair_get_sk","credentialissuerkeypair_to_json","credentialissuerkeypair_from_json","__wbg_credentialpok_free","__wbg_credentialrevealsig_free","credentialrevealsig_get_pok","__wbg_credentialsignature_free","__wbg_credentialuserkeypair_free","credentialuserkeypair_get_pk","credentialuserkeypair_get_sk","credentialuserkeypair_to_json","credentialuserkeypair_from_json","FeeInputs","__wbg_feeinputs_free","feeinputs_new","am","tr","ar","om","TxoRef","ptr3","ptr4","feeinputs_append","feeinputs_append2","KVBlind","__wbg_kvblind_free","kvblind_gen_random","kvblind_to_json","kvblind_from_json","KVHash","__wbg_kvhash_free","data","kvhash_new_no_blind","kv_blind","kvhash_new_with_blind","Key","__wbg_key_free","key_gen_random","key_to_base64","string","key_from_base64","__wbg_ownermemo_free","ownermemo_from_json","ownermemo_clone","PublicParams","__wbg_publicparams_free","publicparams_new","__wbg_signaturerules_free","threshold","weights","signaturerules_new","__wbg_tracingpolicies_free","__wbg_tracingpolicy_free","tracing_key","tracingpolicy_new_with_tracing","cred_issuer_key","reveal_map","tracing","tracingpolicy_new_with_identity_tracing","TransactionBuilder","__wbg_transactionbuilder_free","transactionbuilder_add_fee_relative_auto","transactionbuilder_get_relative_outputs","v0","result","getArrayJsValueFromWasm0","inputs","transactionbuilder_add_fee","transactionbuilder_check_fee","seq_id","transactionbuilder_new","memo","token_code","asset_rules","transactionbuilder_add_operation_create_asset","policy_choice","transactionbuilder_add_operation_create_asset_with_policy","which_check","transactionbuilder_add_policy_option","code","seq_num","amount","conf_amount","zei_params","transactionbuilder_add_basic_issue_asset","transactionbuilder_add_operation_air_assign","auth_key_pair","transactionbuilder_add_operation_kv_update_no_hash","kv_hash","transactionbuilder_add_operation_kv_update_with_hash","new_memo","transactionbuilder_add_operation_update_memo","op","transactionbuilder_add_transfer_operation","transactionbuilder_sign","transactionbuilder_transaction","transactionbuilder_transaction_handle","transactionbuilder_get_owner_record","transactionbuilder_get_owner_memo","TransferOperationBuilder","__wbg_transferoperationbuilder_free","transferoperationbuilder_new","transferoperationbuilder_debug","txo_ref","asset_record","tracing_policies","transferoperationbuilder_add_input_with_tracing","transferoperationbuilder_add_input_no_tracing","recipient","conf_type","transferoperationbuilder_add_output_with_tracing","transferoperationbuilder_add_output_no_tracing","transferoperationbuilder_balance","transferoperationbuilder_create","transferoperationbuilder_sign","input_idx","transferoperationbuilder_add_cosignature","transferoperationbuilder_builder","transferoperationbuilder_transaction","__wbg_txoref_free","txoref_relative","txoref_absolute","__wbg_xfrkeypair_free","__wbg_get_xfrkeypair_pub_key","arg0","__wbg_set_xfrkeypair_pub_key","__wbg_xfrpublickey_free","__wbindgen_object_drop_ref","__wbindgen_json_serialize","arg1","__wbindgen_string_new","__wbindgen_json_parse","parse","__wbg_getRandomValues_57e4008f45f0e105","getRandomValues","__wbg_randomFillSync_d90848a552cbd666","arg2","randomFillSync","__wbg_self_f865985e662246aa","self","__wbg_static_accessor_MODULE_39947eb3fe77895f","__wbg_require_c59851dfa0dc7e78","require","__wbg_crypto_bfb05100db79193b","crypto","__wbg_msCrypto_f6dddc6ae048b7e2","msCrypto","__wbindgen_is_undefined","__wbg_self_86b4b13392c7af56","__wbg_static_accessor_MODULE_452b4680e8614c81","__wbg_require_f5521a5b85ad2542","__wbg_crypto_b8c92eaac23d0d80","__wbg_msCrypto_9ad6677321a08dd8","__wbg_getRandomValues_dd27e6b0652b3236","__wbg_getRandomValues_e57c9b75ddead065","__wbg_randomFillSync_d2ba53160aec6aba","__wbg_buffer_eb5185aa4a8e9c62","__wbg_length_2e324c9c0e74a81d","__wbg_new_3d94e83f0a6bf252","__wbg_set_d4d7629a896d4b3e","__wbg_newwithlength_02a009c0728d3ba1","__wbg_subarray_cc54babc55409ee0","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_memory","bytes","wasmModule","WebAssembly","Module","wasmInstance","Instance","__wasm","assertPath","TypeError","normalizeStringPosix","allowAboveRoot","res","lastSegmentLength","lastSlash","dots","charCodeAt","lastSlashIndex","lastIndexOf","posix","resolve","cwd","resolvedPath","resolvedAbsolute","process","normalize","isAbsolute","trailingSeparator","join","joined","relative","to","fromStart","fromEnd","fromLen","toStart","toLen","lastCommonSep","fromCode","out","_makeLong","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","pathObject","sep","dir","root","base","_format","delimiter","win32"],"mappings":"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","file":"768.bundle.js","sourcesContent":["let imports = {};\nimports['__wbindgen_placeholder__'] = module.exports;\nlet wasm;\nconst { TextDecoder } = require(String.raw`util`);\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetNodeBufferMemory0 = null;\nfunction getNodeBufferMemory0() {\n    if (cachegetNodeBufferMemory0 === null || cachegetNodeBufferMemory0.buffer !== wasm.memory.buffer) {\n        cachegetNodeBufferMemory0 = Buffer.from(wasm.memory.buffer);\n    }\n    return cachegetNodeBufferMemory0;\n}\n\nfunction passStringToWasm0(arg, malloc) {\n\n    const len = Buffer.byteLength(arg);\n    const ptr = malloc(len);\n    getNodeBufferMemory0().write(arg, ptr, len);\n    WASM_VECTOR_LEN = len;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nconst u32CvtShim = new Uint32Array(2);\n\nconst uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);\n\nlet stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n    if (stack_pointer == 1) throw new Error('out of js stack');\n    heap[--stack_pointer] = obj;\n    return stack_pointer;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* Returns the git commit hash and commit date of the commit this library was built against.\n* @returns {string}\n*/\nmodule.exports.build_id = function() {\n    try {\n        wasm.build_id(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Generates random Base64 encoded asset type as a Base64 string. Used in asset definitions.\n* @see {@link\n* module:Findora-Wasm~TransactionBuilder#add_operation_create_asset|add_operation_create_asset}\n* for instructions on how to define an asset with a new\n* asset type\n* @returns {string}\n*/\nmodule.exports.random_asset_type = function() {\n    try {\n        wasm.random_asset_type(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Generates asset type as a Base64 string from a JSON-serialized JavaScript value.\n* @param {any} val\n* @returns {string}\n*/\nmodule.exports.asset_type_from_jsvalue = function(val) {\n    try {\n        wasm.asset_type_from_jsvalue(8, addBorrowedObject(val));\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        heap[stack_pointer++] = undefined;\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Given a serialized state commitment and transaction, returns true if the transaction correctly\n* hashes up to the state commitment and false otherwise.\n* @param {string} state_commitment - String representing the state commitment.\n* @param {string} authenticated_txn - String representing the transaction.\n* @see {@link module:Network~Network#getTxn|Network.getTxn} for instructions on fetching a transaction from the ledger.\n* @see {@link module:Network~Network#getStateCommitment|Network.getStateCommitment}\n* for instructions on fetching a ledger state commitment.\n* @throws Will throw an error if the state commitment or the transaction fails to deserialize.\n* @param {string} state_commitment\n* @param {string} authenticated_txn\n* @returns {boolean}\n*/\nmodule.exports.verify_authenticated_txn = function(state_commitment, authenticated_txn) {\n    var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(authenticated_txn, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.verify_authenticated_txn(ptr0, len0, ptr1, len1);\n    return ret !== 0;\n};\n\n/**\n* Given a serialized state commitment and an authenticated custom data result, returns true if the custom data result correctly\n* hashes up to the state commitment and false otherwise.\n* @param {string} state_commitment - String representing the state commitment.\n* @param {JsValue} authenticated_txn - JSON-encoded value representing the authenticated custom\n* data result.\n* @throws Will throw an error if the state commitment or the authenticated result fail to deserialize.\n* @param {string} state_commitment\n* @param {any} authenticated_res\n* @returns {boolean}\n*/\nmodule.exports.verify_authenticated_custom_data_result = function(state_commitment, authenticated_res) {\n    var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.verify_authenticated_custom_data_result(ptr0, len0, addHeapObject(authenticated_res));\n    return ret !== 0;\n};\n\n/**\n* Performs a simple loan repayment fee calculation.\n*\n* The returned fee is a fraction of the `outstanding_balance`\n* where the interest rate is expressed as a fraction `ir_numerator` / `ir_denominator`.\n*\n* This function is specific to the  Lending Demo.\n* @param {BigInt} ir_numerator - Interest rate numerator.\n* @param {BigInt} ir_denominator - Interest rate denominator.\n* @param {BigInt} outstanding_balance - Amount of outstanding debt.\n* @ignore\n* @param {BigInt} ir_numerator\n* @param {BigInt} ir_denominator\n* @param {BigInt} outstanding_balance\n* @returns {BigInt}\n*/\nmodule.exports.calculate_fee = function(ir_numerator, ir_denominator, outstanding_balance) {\n    uint64CvtShim[0] = ir_numerator;\n    const low0 = u32CvtShim[0];\n    const high0 = u32CvtShim[1];\n    uint64CvtShim[0] = ir_denominator;\n    const low1 = u32CvtShim[0];\n    const high1 = u32CvtShim[1];\n    uint64CvtShim[0] = outstanding_balance;\n    const low2 = u32CvtShim[0];\n    const high2 = u32CvtShim[1];\n    wasm.calculate_fee(8, low0, high0, low1, high1, low2, high2);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    u32CvtShim[0] = r0;\n    u32CvtShim[1] = r1;\n    const n3 = uint64CvtShim[0];\n    return n3;\n};\n\n/**\n* Returns an address to use for cancelling debt tokens in a debt swap.\n* @ignore\n* @returns {XfrPublicKey}\n*/\nmodule.exports.get_null_pk = function() {\n    var ret = wasm.get_null_pk();\n    return XfrPublicKey.__wrap(ret);\n};\n\n/**\n* @ignore\n* @returns {string}\n*/\nmodule.exports.create_default_policy_info = function() {\n    try {\n        wasm.create_default_policy_info(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Create policy information needed for debt token asset types.\n* This data will be parsed by the policy evalautor to ensure\n* that all payment and fee amounts are correct.\n* # Arguments\n*\n* * `ir_numerator` - interest rate numerator\n* * `ir_denominator`- interest rate denominator\n* * `fiat_code` - Base64 string representing asset type used to pay off the loan\n* * `amount` - loan amount\n* @ignore\n* @param {BigInt} ir_numerator\n* @param {BigInt} ir_denominator\n* @param {string} fiat_code\n* @param {BigInt} loan_amount\n* @returns {string}\n*/\nmodule.exports.create_debt_policy_info = function(ir_numerator, ir_denominator, fiat_code, loan_amount) {\n    try {\n        uint64CvtShim[0] = ir_numerator;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        uint64CvtShim[0] = ir_denominator;\n        const low1 = u32CvtShim[0];\n        const high1 = u32CvtShim[1];\n        var ptr2 = passStringToWasm0(fiat_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        uint64CvtShim[0] = loan_amount;\n        const low3 = u32CvtShim[0];\n        const high3 = u32CvtShim[1];\n        wasm.create_debt_policy_info(8, low0, high0, low1, high1, ptr2, len2, low3, high3);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Creates the memo needed for debt token asset types. The memo will be parsed by the policy evaluator to ensure\n* that all payment and fee amounts are correct.\n* @param {BigInt} ir_numerator  - Interest rate numerator.\n* @param {BigInt} ir_denominator - Interest rate denominator.\n* @param {string} fiat_code - Base64 string representing asset type used to pay off the loan.\n* @param {BigInt} loan_amount - Loan amount.\n* @throws Will throw an error if `fiat_code` fails to deserialize.\n* @ignore\n* @param {BigInt} ir_numerator\n* @param {BigInt} ir_denominator\n* @param {string} fiat_code\n* @param {BigInt} loan_amount\n* @returns {string}\n*/\nmodule.exports.create_debt_memo = function(ir_numerator, ir_denominator, fiat_code, loan_amount) {\n    try {\n        uint64CvtShim[0] = ir_numerator;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        uint64CvtShim[0] = ir_denominator;\n        const low1 = u32CvtShim[0];\n        const high1 = u32CvtShim[1];\n        var ptr2 = passStringToWasm0(fiat_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        uint64CvtShim[0] = loan_amount;\n        const low3 = u32CvtShim[0];\n        const high3 = u32CvtShim[1];\n        wasm.create_debt_memo(8, low0, high0, low1, high1, ptr2, len2, low3, high3);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    const mem = getUint32Memory0();\n    const slice = mem.subarray(ptr / 4, ptr / 4 + len);\n    const result = [];\n    for (let i = 0; i < slice.length; i++) {\n        result.push(takeObject(slice[i]));\n    }\n    return result;\n}\n/**\n* Returns a JavaScript object containing decrypted owner record information,\n* where `amount` is the decrypted asset amount, and `asset_type` is the decrypted asset type code.\n*\n* @param {ClientAssetRecord} record - Owner record.\n* @param {OwnerMemo} owner_memo - Owner memo of the associated record.\n* @param {XfrKeyPair} keypair - Keypair of asset owner.\n* @see {@link module:Findora-Wasm~ClientAssetRecord#from_json_record|ClientAssetRecord.from_json_record} for information about how to construct an asset record object\n* from a JSON result returned from the ledger server.\n* @param {ClientAssetRecord} record\n* @param {OwnerMemo | undefined} owner_memo\n* @param {XfrKeyPair} keypair\n* @returns {any}\n*/\nmodule.exports.open_client_asset_record = function(record, owner_memo, keypair) {\n    _assertClass(record, ClientAssetRecord);\n    let ptr0 = 0;\n    if (!isLikeNone(owner_memo)) {\n        _assertClass(owner_memo, OwnerMemo);\n        ptr0 = owner_memo.ptr;\n        owner_memo.ptr = 0;\n    }\n    _assertClass(keypair, XfrKeyPair);\n    var ret = wasm.open_client_asset_record(record.ptr, ptr0, keypair.ptr);\n    return takeObject(ret);\n};\n\n/**\n* Extracts the public key as a string from a transfer key pair.\n* @param {XfrKeyPair} key_pair\n* @returns {string}\n*/\nmodule.exports.get_pub_key_str = function(key_pair) {\n    try {\n        _assertClass(key_pair, XfrKeyPair);\n        wasm.get_pub_key_str(8, key_pair.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Extracts the private key as a string from a transfer key pair.\n* @param {XfrKeyPair} key_pair\n* @returns {string}\n*/\nmodule.exports.get_priv_key_str = function(key_pair) {\n    try {\n        _assertClass(key_pair, XfrKeyPair);\n        wasm.get_priv_key_str(8, key_pair.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Creates a new transfer key pair.\n* @returns {XfrKeyPair}\n*/\nmodule.exports.new_keypair = function() {\n    var ret = wasm.new_keypair();\n    return XfrKeyPair.__wrap(ret);\n};\n\n/**\n* Generates a new keypair deterministically from a seed string and an optional name.\n* @param {string} seed_str\n* @param {string | undefined} name\n* @returns {XfrKeyPair}\n*/\nmodule.exports.new_keypair_from_seed = function(seed_str, name) {\n    var ptr0 = passStringToWasm0(seed_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = isLikeNone(name) ? 0 : passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.new_keypair_from_seed(ptr0, len0, ptr1, len1);\n    return XfrKeyPair.__wrap(ret);\n};\n\n/**\n* Returns base64 encoded representation of an XfrPublicKey.\n* @param {XfrPublicKey} key\n* @returns {string}\n*/\nmodule.exports.public_key_to_base64 = function(key) {\n    try {\n        _assertClass(key, XfrPublicKey);\n        wasm.public_key_to_base64(8, key.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Converts a base64 encoded public key string to a public key.\n* @param {string} pk\n* @returns {XfrPublicKey}\n*/\nmodule.exports.public_key_from_base64 = function(pk) {\n    var ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.public_key_from_base64(ptr0, len0);\n    return XfrPublicKey.__wrap(ret);\n};\n\n/**\n* Expresses a transfer key pair as a hex-encoded string.\n* To decode the string, use `keypair_from_str` function.\n* @param {XfrKeyPair} key_pair\n* @returns {string}\n*/\nmodule.exports.keypair_to_str = function(key_pair) {\n    try {\n        _assertClass(key_pair, XfrKeyPair);\n        wasm.keypair_to_str(8, key_pair.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Constructs a transfer key pair from a hex-encoded string.\n* The encode a key pair, use `keypair_to_str` function.\n* @param {string} str\n* @returns {XfrKeyPair}\n*/\nmodule.exports.keypair_from_str = function(str) {\n    var ptr0 = passStringToWasm0(str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.keypair_from_str(ptr0, len0);\n    return XfrKeyPair.__wrap(ret);\n};\n\n/**\n* Generates a new credential issuer key.\n* @param {JsValue} attributes - Array of attribute types of the form `[{name: \"credit_score\",\n* size: 3}]`. The size refers to byte-size of the credential. In this case, the \"credit_score\"\n* attribute is represented as a 3 byte string \"760\". `attributes` is the list of attribute types\n* that the issuer can sign off on.\n* @param {any} attributes\n* @returns {CredentialIssuerKeyPair}\n*/\nmodule.exports.wasm_credential_issuer_key_gen = function(attributes) {\n    var ret = wasm.wasm_credential_issuer_key_gen(addHeapObject(attributes));\n    return CredentialIssuerKeyPair.__wrap(ret);\n};\n\n/**\n* Verifies a credential commitment. Used to confirm that a credential is tied to a ledger\n* address.\n* @param {CredIssuerPublicKey} issuer_pub_key - The credential issuer that has attested to the\n* credentials that have been committed to.\n* @param {CredentialCommitment} Credential commitment\n* @param {CredPoK} Proof of knowledge of the underlying commitment\n* @param {XfrPublicKey} Ledger address linked to this credential commitment.\n* @throws Will throw an error during verification failure (i.e. the supplied ledger address is\n* incorrect, the commitment is tied to a different credential issuer, or the proof of knowledge is\n* invalid, etc.)\n* @param {CredIssuerPublicKey} issuer_pub_key\n* @param {CredentialCommitment} commitment\n* @param {CredentialPoK} pok\n* @param {XfrPublicKey} xfr_pk\n*/\nmodule.exports.wasm_credential_verify_commitment = function(issuer_pub_key, commitment, pok, xfr_pk) {\n    _assertClass(issuer_pub_key, CredIssuerPublicKey);\n    _assertClass(commitment, CredentialCommitment);\n    _assertClass(pok, CredentialPoK);\n    _assertClass(xfr_pk, XfrPublicKey);\n    wasm.wasm_credential_verify_commitment(issuer_pub_key.ptr, commitment.ptr, pok.ptr, xfr_pk.ptr);\n};\n\n/**\n* Generates a new reveal proof from a credential commitment key.\n* @param {CredUserSecretKey} user_secret_key - Secret key of the credential user who owns\n* the credentials.\n* @param {Credential} credential - Credential whose attributes will be revealed.\n* @param {JsValue} reveal_fields - Array of strings representing attribute fields to reveal.\n* @throws Will throw an error if a reveal proof cannot be generated from the credential\n* or ```reveal_fields``` fails to deserialize.\n* @param {CredUserSecretKey} user_secret_key\n* @param {Credential} credential\n* @param {CredentialCommitmentKey} key\n* @param {any} reveal_fields\n* @returns {CredentialPoK}\n*/\nmodule.exports.wasm_credential_open_commitment = function(user_secret_key, credential, key, reveal_fields) {\n    _assertClass(user_secret_key, CredUserSecretKey);\n    _assertClass(credential, Credential);\n    _assertClass(key, CredentialCommitmentKey);\n    var ret = wasm.wasm_credential_open_commitment(user_secret_key.ptr, credential.ptr, key.ptr, addHeapObject(reveal_fields));\n    return CredentialPoK.__wrap(ret);\n};\n\n/**\n* Generates a new credential user key.\n* @param {CredIssuerPublicKey} issuer_pub_key - The credential issuer that can sign off on this\n* user's attributes.\n* @param {CredIssuerPublicKey} issuer_pub_key\n* @returns {CredentialUserKeyPair}\n*/\nmodule.exports.wasm_credential_user_key_gen = function(issuer_pub_key) {\n    _assertClass(issuer_pub_key, CredIssuerPublicKey);\n    var ret = wasm.wasm_credential_user_key_gen(issuer_pub_key.ptr);\n    return CredentialUserKeyPair.__wrap(ret);\n};\n\n/**\n* Generates a signature on user attributes that can be used to create a credential.\n* @param {CredIssuerSecretKey} issuer_secret_key - Secret key of credential issuer.\n* @param {CredUserPublicKey} user_public_key - Public key of credential user.\n* @param {JsValue} attributes - Array of attribute assignments of the form `[{name: \"credit_score\",\n* val: \"760\"}]`.\n* @throws Will throw an error if the signature cannot be generated.\n* @param {CredIssuerSecretKey} issuer_secret_key\n* @param {CredUserPublicKey} user_public_key\n* @param {any} attributes\n* @returns {CredentialSignature}\n*/\nmodule.exports.wasm_credential_sign = function(issuer_secret_key, user_public_key, attributes) {\n    _assertClass(issuer_secret_key, CredIssuerSecretKey);\n    _assertClass(user_public_key, CredUserPublicKey);\n    var ret = wasm.wasm_credential_sign(issuer_secret_key.ptr, user_public_key.ptr, addHeapObject(attributes));\n    return CredentialSignature.__wrap(ret);\n};\n\n/**\n* Generates a signature on user attributes that can be used to create a credential.\n* @param {CredIssuerPublicKey} issuer_public_key - Public key of credential issuer.\n* @param {CredentialSignature} signature - Credential issuer signature on attributes.\n* @param {JsValue} attributes - Array of attribute assignments of the form `[{name: \"credit_score\",\n* val: \"760\"}]'.\n* @param {CredIssuerPublicKey} issuer_public_key\n* @param {CredentialSignature} signature\n* @param {any} attributes\n* @returns {Credential}\n*/\nmodule.exports.create_credential = function(issuer_public_key, signature, attributes) {\n    try {\n        _assertClass(issuer_public_key, CredIssuerPublicKey);\n        _assertClass(signature, CredentialSignature);\n        var ret = wasm.create_credential(issuer_public_key.ptr, signature.ptr, addBorrowedObject(attributes));\n        return Credential.__wrap(ret);\n    } finally {\n        heap[stack_pointer++] = undefined;\n    }\n};\n\n/**\n* Generates a credential commitment. A credential commitment can be used to selectively reveal\n* attribute assignments.\n* @param {CredUserSecretKey} user_secret_key - Secret key of credential user.\n* @param {XfrPublicKey} user_public_key - Ledger signing key to link this credential to.\n* @param {Credential} credential - Credential object.\n* @param {CredUserSecretKey} user_secret_key\n* @param {XfrPublicKey} user_public_key\n* @param {Credential} credential\n* @returns {CredentialCommitmentData}\n*/\nmodule.exports.wasm_credential_commit = function(user_secret_key, user_public_key, credential) {\n    _assertClass(user_secret_key, CredUserSecretKey);\n    _assertClass(user_public_key, XfrPublicKey);\n    _assertClass(credential, Credential);\n    var ret = wasm.wasm_credential_commit(user_secret_key.ptr, user_public_key.ptr, credential.ptr);\n    return CredentialCommitmentData.__wrap(ret);\n};\n\n/**\n* Selectively reveals attributes committed to in a credential commitment\n* @param {CredUserSecretKey} user_sk - Secret key of credential user.\n* @param {Credential} credential - Credential object.\n* @param {JsValue} reveal_fields - Array of string names representing credentials to reveal (i.e.\n* `[\"credit_score\"]`).\n* @param {CredUserSecretKey} user_sk\n* @param {Credential} credential\n* @param {any} reveal_fields\n* @returns {CredentialRevealSig}\n*/\nmodule.exports.wasm_credential_reveal = function(user_sk, credential, reveal_fields) {\n    _assertClass(user_sk, CredUserSecretKey);\n    _assertClass(credential, Credential);\n    var ret = wasm.wasm_credential_reveal(user_sk.ptr, credential.ptr, addHeapObject(reveal_fields));\n    return CredentialRevealSig.__wrap(ret);\n};\n\n/**\n* Verifies revealed attributes from a commitment.\n* @param {CredIssuerPublicKey} issuer_pub_key - Public key of credential issuer.\n* @param {JsValue} attributes - Array of attribute assignments to check of the form `[{name: \"credit_score\",\n* val: \"760\"}]`.\n* @param {CredentialCommitment} commitment - Commitment to the credential.\n* @param {CredentialPoK} pok - Proof that the credential commitment is valid and commits\n* to the attribute values being revealed.\n* @param {CredIssuerPublicKey} issuer_pub_key\n* @param {any} attributes\n* @param {CredentialCommitment} commitment\n* @param {CredentialPoK} pok\n*/\nmodule.exports.wasm_credential_verify = function(issuer_pub_key, attributes, commitment, pok) {\n    _assertClass(issuer_pub_key, CredIssuerPublicKey);\n    _assertClass(commitment, CredentialCommitment);\n    _assertClass(pok, CredentialPoK);\n    wasm.wasm_credential_verify(issuer_pub_key.ptr, addHeapObject(attributes), commitment.ptr, pok.ptr);\n};\n\n/**\n* Returns information about traceable assets for a given transfer.\n* @param {JsValue} xfr_body - JSON of a transfer note from a transfer operation.\n* @param {AssetTracerKeyPair} tracer_keypair - Asset tracer keypair.\n* @param {JsValue} candidate_assets - List of asset types traced by the tracer keypair.\n* @param {any} xfr_body\n* @param {AssetTracerKeyPair} tracer_keypair\n* @param {any} _candidate_assets\n* @returns {any}\n*/\nmodule.exports.trace_assets = function(xfr_body, tracer_keypair, _candidate_assets) {\n    _assertClass(tracer_keypair, AssetTracerKeyPair);\n    var ret = wasm.trace_assets(addHeapObject(xfr_body), tracer_keypair.ptr, addHeapObject(_candidate_assets));\n    return takeObject(ret);\n};\n\n/**\n* Returns bech32 encoded representation of an XfrPublicKey.\n* @param {XfrPublicKey} key\n* @returns {string}\n*/\nmodule.exports.public_key_to_bech32 = function(key) {\n    try {\n        _assertClass(key, XfrPublicKey);\n        wasm.public_key_to_bech32(8, key.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Converts a bech32 encoded public key string to a public key.\n* @param {string} addr\n* @returns {XfrPublicKey}\n*/\nmodule.exports.public_key_from_bech32 = function(addr) {\n    var ptr0 = passStringToWasm0(addr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.public_key_from_bech32(ptr0, len0);\n    return XfrPublicKey.__wrap(ret);\n};\n\n/**\n* @param {string} pk\n* @returns {string}\n*/\nmodule.exports.bech32_to_base64 = function(pk) {\n    try {\n        var ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.bech32_to_base64(8, ptr0, len0);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* @param {string} pk\n* @returns {string}\n*/\nmodule.exports.base64_to_bech32 = function(pk) {\n    try {\n        var ptr0 = passStringToWasm0(pk, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.base64_to_bech32(8, ptr0, len0);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {string} key_pair\n* @param {string} password\n* @returns {Uint8Array}\n*/\nmodule.exports.encryption_pbkdf2_aes256gcm = function(key_pair, password) {\n    var ptr0 = passStringToWasm0(key_pair, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    wasm.encryption_pbkdf2_aes256gcm(8, ptr0, len0, ptr1, len1);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    var v2 = getArrayU8FromWasm0(r0, r1).slice();\n    wasm.__wbindgen_free(r0, r1 * 1);\n    return v2;\n};\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} enc_key_pair\n* @param {string} password\n* @returns {string}\n*/\nmodule.exports.decryption_pbkdf2_aes256gcm = function(enc_key_pair, password) {\n    try {\n        var ptr0 = passArray8ToWasm0(enc_key_pair, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.decryption_pbkdf2_aes256gcm(8, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* @param {string} sk_str\n* @returns {XfrKeyPair | undefined}\n*/\nmodule.exports.create_keypair_from_secret = function(sk_str) {\n    var ptr0 = passStringToWasm0(sk_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.create_keypair_from_secret(ptr0, len0);\n    return ret === 0 ? undefined : XfrKeyPair.__wrap(ret);\n};\n\n/**\n* @param {XfrKeyPair} kp\n* @returns {XfrPublicKey}\n*/\nmodule.exports.get_pk_from_keypair = function(kp) {\n    _assertClass(kp, XfrKeyPair);\n    var ret = wasm.get_pk_from_keypair(kp.ptr);\n    return XfrPublicKey.__wrap(ret);\n};\n\n/**\n* Randomly generate a 12words-length mnemonic.\n* @returns {string}\n*/\nmodule.exports.generate_mnemonic_default = function() {\n    try {\n        wasm.generate_mnemonic_default(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Generate mnemonic with custom length and language.\n* - @param `wordslen`: acceptable value are one of [ 12, 15, 18, 21, 24 ]\n* - @param `lang`: acceptable value are one of [ \"en\", \"zh\", \"zh_traditional\", \"fr\", \"it\", \"ko\", \"sp\", \"jp\" ]\n* @param {number} wordslen\n* @param {string} lang\n* @returns {string}\n*/\nmodule.exports.generate_mnemonic_custom = function(wordslen, lang) {\n    try {\n        var ptr0 = passStringToWasm0(lang, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.generate_mnemonic_custom(8, wordslen, ptr0, len0);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Restore the XfrKeyPair from a mnemonic with a default bip44-path,\n* that is \"m/44'/917'/0'/0/0\" (\"m/44'/coin'/account'/change/address\").\n* @param {string} phrase\n* @returns {XfrKeyPair}\n*/\nmodule.exports.restore_keypair_from_mnemonic_default = function(phrase) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.restore_keypair_from_mnemonic_default(ptr0, len0);\n    return XfrKeyPair.__wrap(ret);\n};\n\n/**\n* Restore the XfrKeyPair from a mnemonic with custom params,\n* in bip44 form.\n* @param {string} phrase\n* @param {string} lang\n* @param {BipPath} path\n* @returns {XfrKeyPair}\n*/\nmodule.exports.restore_keypair_from_mnemonic_bip44 = function(phrase, lang, path) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(lang, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    _assertClass(path, BipPath);\n    var ret = wasm.restore_keypair_from_mnemonic_bip44(ptr0, len0, ptr1, len1, path.ptr);\n    return XfrKeyPair.__wrap(ret);\n};\n\n/**\n* Restore the XfrKeyPair from a mnemonic with custom params,\n* in bip49 form.\n* @param {string} phrase\n* @param {string} lang\n* @param {BipPath} path\n* @returns {XfrKeyPair}\n*/\nmodule.exports.restore_keypair_from_mnemonic_bip49 = function(phrase, lang, path) {\n    var ptr0 = passStringToWasm0(phrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(lang, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    _assertClass(path, BipPath);\n    var ret = wasm.restore_keypair_from_mnemonic_bip49(ptr0, len0, ptr1, len1, path.ptr);\n    return XfrKeyPair.__wrap(ret);\n};\n\n/**\n* ID of FRA, in `String` format.\n* @returns {string}\n*/\nmodule.exports.fra_get_asset_code = function() {\n    try {\n        wasm.fra_get_asset_code(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n};\n\n/**\n* Fee smaller than this value will be denied.\n* @returns {BigInt}\n*/\nmodule.exports.fra_get_minimal_fee = function() {\n    wasm.fra_get_minimal_fee(8);\n    var r0 = getInt32Memory0()[8 / 4 + 0];\n    var r1 = getInt32Memory0()[8 / 4 + 1];\n    u32CvtShim[0] = r0;\n    u32CvtShim[1] = r1;\n    const n0 = uint64CvtShim[0];\n    return n0;\n};\n\n/**\n* The destination for fee to be transfered to.\n* @returns {XfrPublicKey}\n*/\nmodule.exports.fra_get_dest_pubkey = function() {\n    var ret = wasm.fra_get_dest_pubkey();\n    return XfrPublicKey.__wrap(ret);\n};\n\nfunction handleError(f) {\n    return function () {\n        try {\n            return f.apply(this, arguments);\n\n        } catch (e) {\n            wasm.__wbindgen_exn_store(addHeapObject(e));\n        }\n    };\n}\n/**\n* When an asset is defined, several options governing the assets must be\n* specified:\n* 1. **Traceable**: Records and identities of traceable assets can be decrypted by a provided tracing key. By defaults, assets do not have\n* any tracing policies.\n* 2. **Transferable**: Non-transferable assets can only be transferred once from the issuer to another user. By default, assets are transferable.\n* 3. **Updatable**: Whether the asset memo can be updated. By default, assets are not updatable.\n* 4. **Transfer signature rules**: Signature weights and threshold for a valid transfer. By\n*    default, there are no special signature requirements.\n* 5. **Max units**: Optional limit on the total number of units of this asset that can be issued.\n*    By default, assets do not have issuance caps.\n* @see {@link module:Findora-Wasm~TracingPolicies|TracingPolicies} for more information about tracing policies.\n* @see {@link module:Findora-Wasm~TransactionBuilder#add_operation_update_memo|add_operation_update_memo} for more information about how to add\n* a memo update operation to a transaction.\n* @see {@link module:Findora-Wasm~SignatureRules|SignatureRules} for more information about co-signatures.\n* @see {@link\n* module:Findora-Wasm~TransactionBuilder#add_operation_create_asset|add_operation_create_asset}\n* for information about how to add asset rules to an asset definition.\n*/\nclass AssetRules {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetRules.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assetrules_free(ptr);\n    }\n    /**\n    * Create a default set of asset rules. See class description for defaults.\n    * @returns {AssetRules}\n    */\n    static new() {\n        var ret = wasm.assetrules_new();\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Adds an asset tracing policy.\n    * @param {TracingPolicy} policy - Tracing policy for the new asset.\n    * @param {TracingPolicy} policy\n    * @returns {AssetRules}\n    */\n    add_tracing_policy(policy) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(policy, TracingPolicy);\n        var ret = wasm.assetrules_add_tracing_policy(ptr, policy.ptr);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Set a cap on the number of units of this asset that can be issued.\n    * @param {BigInt} max_units - Maximum number of units that can be issued.\n    * @param {BigInt} max_units\n    * @returns {AssetRules}\n    */\n    set_max_units(max_units) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = max_units;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.assetrules_set_max_units(ptr, low0, high0);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Transferability toggle. Assets that are not transferable can only be transferred by the asset\n    * issuer.\n    * @param {boolean} transferable - Boolean indicating whether asset can be transferred.\n    * @param {boolean} transferable\n    * @returns {AssetRules}\n    */\n    set_transferable(transferable) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.assetrules_set_transferable(ptr, transferable);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * The updatable flag determines whether the asset memo can be updated after issuance.\n    * @param {boolean} updatable - Boolean indicating whether asset memo can be updated.\n    * @see {@link module:Findora-Wasm~TransactionBuilder#add_operation_update_memo|add_operation_update_memo} for more information about how to add\n    * a memo update operation to a transaction.\n    * @param {boolean} updatable\n    * @returns {AssetRules}\n    */\n    set_updatable(updatable) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.assetrules_set_updatable(ptr, updatable);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Co-signature rules. Assets with co-signatue rules require additional weighted signatures to\n    * be transferred.\n    * @param {SignatureRules} multisig_rules - Co-signature restrictions.\n    * @param {SignatureRules} multisig_rules\n    * @returns {AssetRules}\n    */\n    set_transfer_multisig_rules(multisig_rules) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(multisig_rules, SignatureRules);\n        var ptr0 = multisig_rules.ptr;\n        multisig_rules.ptr = 0;\n        var ret = wasm.assetrules_set_transfer_multisig_rules(ptr, ptr0);\n        return AssetRules.__wrap(ret);\n    }\n    /**\n    * Set the decimal number of asset. Return error string if failed, otherwise return changed asset.\n    * #param {Number} decimals - The number of decimals used to set its user representation.\n    * Decimals should be 0 ~ 255.\n    * @param {number} decimals\n    * @returns {AssetRules}\n    */\n    set_decimals(decimals) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.assetrules_set_decimals(ptr, decimals);\n        return AssetRules.__wrap(ret);\n    }\n}\nmodule.exports.AssetRules = AssetRules;\n/**\n* Key pair used by asset tracers to decrypt asset amounts, types, and identity\n* commitments associated with traceable asset transfers.\n* @see {@link module:Findora-Wasm.TracingPolicy|TracingPolicy} for information about tracing policies.\n* @see {@link module:Findora-Wasm~AssetRules#add_tracing_policy|add_tracing_policy} for information about how to add a tracing policy to\n* an asset definition.\n*/\nclass AssetTracerKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetTracerKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assettracerkeypair_free(ptr);\n    }\n    /**\n    * Creates a new tracer key pair.\n    * @returns {AssetTracerKeyPair}\n    */\n    static new() {\n        var ret = wasm.assettracerkeypair_new();\n        return AssetTracerKeyPair.__wrap(ret);\n    }\n}\nmodule.exports.AssetTracerKeyPair = AssetTracerKeyPair;\n/**\n* Object representing an asset definition. Used to fetch tracing policies and any other\n* information that may be required to construct a valid transfer or issuance.\n*/\nclass AssetType {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetType.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_assettype_free(ptr);\n    }\n    /**\n    * Builds an asset type from a JSON-encoded JavaScript value.\n    * @param {JsValue} val - JSON-encoded asset type fetched from ledger server with the `asset_token/{code}` route.\n    * Note: The first field of an asset type is `properties`. See the example below.\n    *\n    * @example\n    * \"properties\":{\n    *   \"code\":{\n    *     \"val\":[151,8,106,38,126,101,250,236,134,77,83,180,43,152,47,57,83,30,60,8,132,218,48,52,167,167,190,244,34,45,78,80]\n    *   },\n    *   \"issuer\":{\"key\":“iFW4jY_DQVSGED05kTseBBn0BllPB9Q9escOJUpf4DY=”},\n    *   \"memo\":“test memo”,\n    *   \"asset_rules\":{\n    *     \"transferable\":true,\n    *     \"updatable\":false,\n    *     \"transfer_multisig_rules\":null,\n    *     \"max_units\":5000\n    *   }\n    * }\n    *\n    * @see {@link module:Findora-Network~Network#getAssetProperties|Network.getAsset} for information about how to\n    * fetch an asset type from the ledger server.\n    * @param {any} json\n    * @returns {AssetType}\n    */\n    static from_json(json) {\n        try {\n            var ret = wasm.assettype_from_json(addBorrowedObject(json));\n            return AssetType.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Fetch the tracing policies associated with this asset type.\n    * @returns {TracingPolicies}\n    */\n    get_tracing_policies() {\n        var ret = wasm.assettype_get_tracing_policies(this.ptr);\n        return TracingPolicies.__wrap(ret);\n    }\n}\nmodule.exports.AssetType = AssetType;\n/**\n* Authenticated address identity registry value. Contains a proof that the AIR result is stored\n* on the ledger.\n*/\nclass AuthenticatedAIRResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuthenticatedAIRResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_authenticatedairresult_free(ptr);\n    }\n    /**\n    * Construct an AIRResult from the JSON-encoded value returned by the ledger.\n    * @see {@link module:Findora-Network~Network#getAIRResult|Network.getAIRResult} for information about how to fetch a\n    * value from the address identity registry.\n    * @param {any} json\n    * @returns {AuthenticatedAIRResult}\n    */\n    static from_json(json) {\n        try {\n            var ret = wasm.authenticatedairresult_from_json(addBorrowedObject(json));\n            return AuthenticatedAIRResult.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Returns true if the authenticated AIR result proofs verify succesfully. If the proofs are\n    * valid, the identity commitment contained in the AIR result is a valid part of the ledger.\n    * @param {string} state_commitment - String representing the ledger state commitment.\n    * @param {string} state_commitment\n    * @returns {boolean}\n    */\n    is_valid(state_commitment) {\n        var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.authenticatedairresult_is_valid(this.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Returns the underlying credential commitment of the AIR result.\n    * @returns {CredentialCommitment | undefined}\n    */\n    get_commitment() {\n        var ret = wasm.authenticatedairresult_get_commitment(this.ptr);\n        return ret === 0 ? undefined : CredentialCommitment.__wrap(ret);\n    }\n}\nmodule.exports.AuthenticatedAIRResult = AuthenticatedAIRResult;\n/**\n* Object representing an authenticable asset record. Clients can validate authentication proofs\n* against a ledger state commitment.\n*/\nclass AuthenticatedAssetRecord {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuthenticatedAssetRecord.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_authenticatedassetrecord_free(ptr);\n    }\n    /**\n    * Given a serialized state commitment, returns true if the\n    * authenticated UTXO proofs validate correctly and false otherwise. If the proofs validate, the\n    * asset record contained in this structure exists on the ledger and is unspent.\n    * @param {string} state_commitment - String representing the state commitment.\n    * @see {@link module:Findora-Network~Network#getStateCommitment|getStateCommitment} for instructions on fetching a ledger state commitment.\n    * @throws Will throw an error if the state commitment fails to deserialize.\n    * @param {string} state_commitment\n    * @returns {boolean}\n    */\n    is_valid(state_commitment) {\n        var ptr0 = passStringToWasm0(state_commitment, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.authenticatedassetrecord_is_valid(this.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * Builds an AuthenticatedAssetRecord from a JSON-encoded asset record returned from the ledger\n    * server.\n    * @param {JsValue} val - JSON-encoded asset record fetched from ledger server.\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for information about how to\n    * fetch an asset record from the ledger server.\n    * @param {any} record\n    * @returns {AuthenticatedAssetRecord}\n    */\n    static from_json_record(record) {\n        try {\n            var ret = wasm.authenticatedassetrecord_from_json_record(addBorrowedObject(record));\n            return AuthenticatedAssetRecord.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.AuthenticatedAssetRecord = AuthenticatedAssetRecord;\n/**\n* Use this struct to express a Bip44/Bip49 path.\n*/\nclass BipPath {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BipPath.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_bippath_free(ptr);\n    }\n    /**\n    * @param {number} coin\n    * @param {number} account\n    * @param {number} change\n    * @param {number} address\n    * @returns {BipPath}\n    */\n    static new(coin, account, change, address) {\n        var ret = wasm.bippath_new(coin, account, change, address);\n        return BipPath.__wrap(ret);\n    }\n}\nmodule.exports.BipPath = BipPath;\n/**\n* This object represents an asset record owned by a ledger key pair.\n* @see {@link module:Findora-Wasm.open_client_asset_record|open_client_asset_record} for information about how to decrypt an encrypted asset\n* record.\n*/\nclass ClientAssetRecord {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ClientAssetRecord.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_clientassetrecord_free(ptr);\n    }\n    /**\n    * Builds a client record from a JSON-encoded JavaScript value.\n    *\n    * @param {JsValue} val - JSON-encoded autehtnicated asset record fetched from ledger server with the `utxo_sid/{sid}` route,\n    * where `sid` can be fetched from the query server with the `get_owned_utxos/{address}` route.\n    * Note: The first field of an asset record is `utxo`. See the example below.\n    *\n    * @example\n    * \"utxo\":{\n    *   \"amount\":{\n    *     \"NonConfidential\":5\n    *   },\n    *  \"asset_type\":{\n    *     \"NonConfidential\":[113,168,158,149,55,64,18,189,88,156,133,204,156,46,106,46,232,62,69,233,157,112,240,132,164,120,4,110,14,247,109,127]\n    *   },\n    *   \"public_key\":\"Glf8dKF6jAPYHzR_PYYYfzaWqpYcMvnrIcazxsilmlA=\"\n    * }\n    *\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for information about how to\n    * fetch an asset record from the ledger server.\n    * @param {any} val\n    * @returns {ClientAssetRecord}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.clientassetrecord_from_json(addBorrowedObject(val));\n            return ClientAssetRecord.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * ClientAssetRecord ==> JsValue\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.clientassetrecord_to_json(this.ptr);\n        return takeObject(ret);\n    }\n}\nmodule.exports.ClientAssetRecord = ClientAssetRecord;\n/**\n* Public key of a credential issuer.\n*/\nclass CredIssuerPublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredIssuerPublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credissuerpublickey_free(ptr);\n    }\n}\nmodule.exports.CredIssuerPublicKey = CredIssuerPublicKey;\n/**\n* Secret key of a credential issuer.\n*/\nclass CredIssuerSecretKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredIssuerSecretKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credissuersecretkey_free(ptr);\n    }\n}\nmodule.exports.CredIssuerSecretKey = CredIssuerSecretKey;\n/**\n* Public key of a credential user.\n*/\nclass CredUserPublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredUserPublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_creduserpublickey_free(ptr);\n    }\n}\nmodule.exports.CredUserPublicKey = CredUserPublicKey;\n/**\n* Secret key of a credential user.\n*/\nclass CredUserSecretKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredUserSecretKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credusersecretkey_free(ptr);\n    }\n}\nmodule.exports.CredUserSecretKey = CredUserSecretKey;\n/**\n* A user credential that can be used to selectively reveal credential attributes.\n* @see {@link module:Findora-Wasm.wasm_credential_commit|wasm_credential_commit} for information about how to commit to a credential.\n* @see {@link module:Findora-Wasm.wasm_credential_reveal|wasm_credential_reveal} for information about how to selectively reveal credential\n* attributes.\n*/\nclass Credential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Credential.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credential_free(ptr);\n    }\n}\nmodule.exports.Credential = Credential;\n/**\n* Commitment to a credential record.\n* @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n* credential commitment.\n*/\nclass CredentialCommitment {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialCommitment.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialcommitment_free(ptr);\n    }\n}\nmodule.exports.CredentialCommitment = CredentialCommitment;\n/**\n* Commitment to a credential record, proof that the commitment is valid, and credential key that can be used\n* to open a commitment.\n*/\nclass CredentialCommitmentData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialCommitmentData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialcommitmentdata_free(ptr);\n    }\n    /**\n    * Returns the underlying credential commitment.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialCommitment}\n    */\n    get_commitment() {\n        var ret = wasm.credentialcommitmentdata_get_commitment(this.ptr);\n        return CredentialCommitment.__wrap(ret);\n    }\n    /**\n    * Returns the underlying proof of knowledge that the credential is valid.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialPoK}\n    */\n    get_pok() {\n        var ret = wasm.credentialcommitmentdata_get_pok(this.ptr);\n        return CredentialPoK.__wrap(ret);\n    }\n    /**\n    * Returns the key used to generate the commitment.\n    * @see {@link module:Findora-Wasm.wasm_credential_open_commitment|wasm_credential_open_commitment} for information about how to open a\n    * credential commitment.\n    * @returns {CredentialCommitmentKey}\n    */\n    get_commit_key() {\n        var ret = wasm.credentialcommitmentdata_get_commit_key(this.ptr);\n        return CredentialCommitmentKey.__wrap(ret);\n    }\n}\nmodule.exports.CredentialCommitmentData = CredentialCommitmentData;\n/**\n* Key used to generate a credential commitment.\n* @see {@link module:Findora-Wasm.wasm_credential_open_commitment|wasm_credential_open_commitment} for information about how to\n* open a credential commitment.\n*/\nclass CredentialCommitmentKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialCommitmentKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialcommitmentkey_free(ptr);\n    }\n}\nmodule.exports.CredentialCommitmentKey = CredentialCommitmentKey;\n/**\n* Key pair of a credential issuer.\n*/\nclass CredentialIssuerKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialIssuerKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialissuerkeypair_free(ptr);\n    }\n    /**\n    * Returns the credential issuer's public key.\n    * @returns {CredIssuerPublicKey}\n    */\n    get_pk() {\n        var ret = wasm.credentialissuerkeypair_get_pk(this.ptr);\n        return CredIssuerPublicKey.__wrap(ret);\n    }\n    /**\n    * Returns the credential issuer's secret key.\n    * @returns {CredIssuerSecretKey}\n    */\n    get_sk() {\n        var ret = wasm.credentialissuerkeypair_get_sk(this.ptr);\n        return CredIssuerSecretKey.__wrap(ret);\n    }\n    /**\n    * Convert the key pair to a serialized value that can be used in the browser.\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.credentialissuerkeypair_to_json(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate a key pair from a JSON-serialized JavaScript value.\n    * @param {any} val\n    * @returns {CredentialIssuerKeyPair}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.credentialissuerkeypair_from_json(addBorrowedObject(val));\n            return CredentialIssuerKeyPair.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.CredentialIssuerKeyPair = CredentialIssuerKeyPair;\n/**\n* Proof that a credential is a valid re-randomization of a credential signed by a certain asset\n* issuer.\n* @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n* credential commitment.\n*/\nclass CredentialPoK {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialPoK.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialpok_free(ptr);\n    }\n}\nmodule.exports.CredentialPoK = CredentialPoK;\n/**\n* Reveal signature of a credential record.\n*/\nclass CredentialRevealSig {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialRevealSig.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialrevealsig_free(ptr);\n    }\n    /**\n    * Returns the underlying credential commitment.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialCommitment}\n    */\n    get_commitment() {\n        var ret = wasm.credentialcommitmentdata_get_commitment(this.ptr);\n        return CredentialCommitment.__wrap(ret);\n    }\n    /**\n    * Returns the underlying proof of knowledge that the credential is valid.\n    * @see {@link module:Findora-Wasm.wasm_credential_verify_commitment|wasm_credential_verify_commitment} for information about how to verify a\n    * credential commitment.\n    * @returns {CredentialPoK}\n    */\n    get_pok() {\n        var ret = wasm.credentialrevealsig_get_pok(this.ptr);\n        return CredentialPoK.__wrap(ret);\n    }\n}\nmodule.exports.CredentialRevealSig = CredentialRevealSig;\n/**\n* Signature of a credential record.\n*/\nclass CredentialSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialsignature_free(ptr);\n    }\n}\nmodule.exports.CredentialSignature = CredentialSignature;\n/**\n* Key pair of a credential user.\n*/\nclass CredentialUserKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CredentialUserKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_credentialuserkeypair_free(ptr);\n    }\n    /**\n    * Returns the credential issuer's public key.\n    * @returns {CredUserPublicKey}\n    */\n    get_pk() {\n        var ret = wasm.credentialuserkeypair_get_pk(this.ptr);\n        return CredUserPublicKey.__wrap(ret);\n    }\n    /**\n    * Returns the credential issuer's secret key.\n    * @returns {CredUserSecretKey}\n    */\n    get_sk() {\n        var ret = wasm.credentialuserkeypair_get_sk(this.ptr);\n        return CredUserSecretKey.__wrap(ret);\n    }\n    /**\n    * Convert the key pair to a serialized value that can be used in the browser.\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.credentialuserkeypair_to_json(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Generate a key pair from a JSON-serialized JavaScript value.\n    * @param {any} val\n    * @returns {CredentialUserKeyPair}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.credentialuserkeypair_from_json(addBorrowedObject(val));\n            return CredentialUserKeyPair.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.CredentialUserKeyPair = CredentialUserKeyPair;\n/**\n*/\nclass FeeInputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(FeeInputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_feeinputs_free(ptr);\n    }\n    /**\n    * @returns {FeeInputs}\n    */\n    static new() {\n        var ret = wasm.feeinputs_new();\n        return FeeInputs.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} am\n    * @param {TxoRef} tr\n    * @param {ClientAssetRecord} ar\n    * @param {OwnerMemo | undefined} om\n    * @param {XfrKeyPair} kp\n    */\n    append(am, tr, ar, om, kp) {\n        uint64CvtShim[0] = am;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(tr, TxoRef);\n        var ptr1 = tr.ptr;\n        tr.ptr = 0;\n        _assertClass(ar, ClientAssetRecord);\n        var ptr2 = ar.ptr;\n        ar.ptr = 0;\n        let ptr3 = 0;\n        if (!isLikeNone(om)) {\n            _assertClass(om, OwnerMemo);\n            ptr3 = om.ptr;\n            om.ptr = 0;\n        }\n        _assertClass(kp, XfrKeyPair);\n        var ptr4 = kp.ptr;\n        kp.ptr = 0;\n        wasm.feeinputs_append(this.ptr, low0, high0, ptr1, ptr2, ptr3, ptr4);\n    }\n    /**\n    * @param {BigInt} am\n    * @param {TxoRef} tr\n    * @param {ClientAssetRecord} ar\n    * @param {OwnerMemo | undefined} om\n    * @param {XfrKeyPair} kp\n    * @returns {FeeInputs}\n    */\n    append2(am, tr, ar, om, kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = am;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(tr, TxoRef);\n        var ptr1 = tr.ptr;\n        tr.ptr = 0;\n        _assertClass(ar, ClientAssetRecord);\n        var ptr2 = ar.ptr;\n        ar.ptr = 0;\n        let ptr3 = 0;\n        if (!isLikeNone(om)) {\n            _assertClass(om, OwnerMemo);\n            ptr3 = om.ptr;\n            om.ptr = 0;\n        }\n        _assertClass(kp, XfrKeyPair);\n        var ptr4 = kp.ptr;\n        kp.ptr = 0;\n        var ret = wasm.feeinputs_append2(ptr, low0, high0, ptr1, ptr2, ptr3, ptr4);\n        return FeeInputs.__wrap(ret);\n    }\n}\nmodule.exports.FeeInputs = FeeInputs;\n/**\n* Blinding factor for a custom data operation. A blinding factor adds a random value to the\n* custom data being hashed to make the hash hiding.\n*/\nclass KVBlind {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KVBlind.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kvblind_free(ptr);\n    }\n    /**\n    * Generate a random blinding factor.\n    * @returns {KVBlind}\n    */\n    static gen_random() {\n        var ret = wasm.kvblind_gen_random();\n        return KVBlind.__wrap(ret);\n    }\n    /**\n    * Convert the key pair to a JSON-encoded value that can be used in the browser.\n    * @returns {any}\n    */\n    to_json() {\n        var ret = wasm.kvblind_to_json(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * Create a KVBlind from a JSON-encoded value.\n    * @param {any} val\n    * @returns {KVBlind}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.kvblind_from_json(addBorrowedObject(val));\n            return KVBlind.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.KVBlind = KVBlind;\n/**\n* Hash that can be stored in the ledger's custom data store.\n*/\nclass KVHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KVHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_kvhash_free(ptr);\n    }\n    /**\n    * Generate a new custom data hash without a blinding factor.\n    * @param {JsValue} data - Data to hash. Must be an array of bytes.\n    * @param {any} data\n    * @returns {KVHash}\n    */\n    static new_no_blind(data) {\n        try {\n            var ret = wasm.kvhash_new_no_blind(addBorrowedObject(data));\n            return KVHash.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Generate a new custom data hash with a blinding factor.\n    * @param {JsValue} data - Data to hash. Must be an array of bytes.\n    * @param {KVBlind} kv_blind - Optional blinding factor.\n    * @param {any} data\n    * @param {KVBlind} kv_blind\n    * @returns {KVHash}\n    */\n    static new_with_blind(data, kv_blind) {\n        try {\n            _assertClass(kv_blind, KVBlind);\n            var ret = wasm.kvhash_new_with_blind(addBorrowedObject(data), kv_blind.ptr);\n            return KVHash.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n}\nmodule.exports.KVHash = KVHash;\n/**\n* Key for hashes in the ledger's custom data store.\n*/\nclass Key {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Key.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_key_free(ptr);\n    }\n    /**\n    * Generate a random key.\n    * Figure out how to store prng ref in browser: https://bugtracker.findora.org/issues/63\n    * @returns {Key}\n    */\n    static gen_random() {\n        var ret = wasm.key_gen_random();\n        return Key.__wrap(ret);\n    }\n    /**\n    * Returns a base64 encoded version of the Key.\n    * @returns {string}\n    */\n    to_base64() {\n        try {\n            wasm.key_to_base64(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Generates a Key from a base64-encoded String.\n    * @param {string} string\n    * @returns {Key}\n    */\n    static from_base64(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.key_from_base64(ptr0, len0);\n        return Key.__wrap(ret);\n    }\n}\nmodule.exports.Key = Key;\n/**\n* Asset owner memo. Contains information needed to decrypt an asset record.\n* @see {@link module:Findora-Wasm.ClientAssetRecord|ClientAssetRecord} for more details about asset records.\n*/\nclass OwnerMemo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OwnerMemo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_ownermemo_free(ptr);\n    }\n    /**\n    * Builds an owner memo from a JSON-serialized JavaScript value.\n    * @param {JsValue} val - JSON owner memo fetched from query server with the `get_owner_memo/{sid}` route,\n    * where `sid` can be fetched from the query server with the `get_owned_utxos/{address}` route. See the example below.\n    *\n    * @example\n    * {\n    *   \"blind_share\":[91,251,44,28,7,221,67,155,175,213,25,183,70,90,119,232,212,238,226,142,159,200,54,19,60,115,38,221,248,202,74,248],\n    *   \"lock\":{\"ciphertext\":[119,54,117,136,125,133,112,193],\"encoded_rand\":\"8KDql2JphPB5WLd7-aYE1bxTQAcweFSmrqymLvPDntM=\"}\n    * }\n    * @param {any} val\n    * @returns {OwnerMemo}\n    */\n    static from_json(val) {\n        try {\n            var ret = wasm.ownermemo_from_json(addBorrowedObject(val));\n            return OwnerMemo.__wrap(ret);\n        } finally {\n            heap[stack_pointer++] = undefined;\n        }\n    }\n    /**\n    * Creates a clone of the owner memo.\n    * @returns {OwnerMemo}\n    */\n    clone() {\n        var ret = wasm.ownermemo_clone(this.ptr);\n        return OwnerMemo.__wrap(ret);\n    }\n}\nmodule.exports.OwnerMemo = OwnerMemo;\n/**\n* Public parameters necessary for generating asset records. Generating this is expensive and\n* should be done as infrequently as possible.\n* @see {@link module:Findora-Wasm~TransactionBuilder#add_basic_issue_asset|add_basic_issue_asset}\n* for information using public parameters to create issuance asset records.\n*/\nclass PublicParams {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicParams.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_publicparams_free(ptr);\n    }\n    /**\n    * Generates a new set of parameters.\n    * @returns {PublicParams}\n    */\n    static new() {\n        var ret = wasm.publicparams_new();\n        return PublicParams.__wrap(ret);\n    }\n}\nmodule.exports.PublicParams = PublicParams;\n/**\n* Stores threshold and weights for a multisignature requirement.\n*/\nclass SignatureRules {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SignatureRules.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_signaturerules_free(ptr);\n    }\n    /**\n    * Creates a new set of co-signature rules.\n    *\n    * @param {BigInt} threshold - Minimum sum of signature weights that is required for an asset\n    * transfer.\n    * @param {JsValue} weights - Array of public key weights of the form `[[\"kAb...\", BigInt(5)]]', where the\n    * first element of each tuple is a base64 encoded public key and the second is the key's\n    * associated weight.\n    * @param {BigInt} threshold\n    * @param {any} weights\n    * @returns {SignatureRules}\n    */\n    static new(threshold, weights) {\n        uint64CvtShim[0] = threshold;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.signaturerules_new(low0, high0, addHeapObject(weights));\n        return SignatureRules.__wrap(ret);\n    }\n}\nmodule.exports.SignatureRules = SignatureRules;\n/**\n* A collection of tracing policies. Use this object when constructing asset transfers to generate\n* the correct tracing proofs for traceable assets.\n*/\nclass TracingPolicies {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TracingPolicies.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_tracingpolicies_free(ptr);\n    }\n}\nmodule.exports.TracingPolicies = TracingPolicies;\n/**\n* Tracing policy for asset transfers. Can be configured to track credentials, the asset type and\n* amount, or both.\n*/\nclass TracingPolicy {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TracingPolicy.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_tracingpolicy_free(ptr);\n    }\n    /**\n    * @param {AssetTracerKeyPair} tracing_key\n    * @returns {TracingPolicy}\n    */\n    static new_with_tracing(tracing_key) {\n        _assertClass(tracing_key, AssetTracerKeyPair);\n        var ret = wasm.tracingpolicy_new_with_tracing(tracing_key.ptr);\n        return TracingPolicy.__wrap(ret);\n    }\n    /**\n    * @param {AssetTracerKeyPair} tracing_key\n    * @param {CredIssuerPublicKey} cred_issuer_key\n    * @param {any} reveal_map\n    * @param {boolean} tracing\n    * @returns {TracingPolicy}\n    */\n    static new_with_identity_tracing(tracing_key, cred_issuer_key, reveal_map, tracing) {\n        _assertClass(tracing_key, AssetTracerKeyPair);\n        _assertClass(cred_issuer_key, CredIssuerPublicKey);\n        var ret = wasm.tracingpolicy_new_with_identity_tracing(tracing_key.ptr, cred_issuer_key.ptr, addHeapObject(reveal_map), tracing);\n        return TracingPolicy.__wrap(ret);\n    }\n}\nmodule.exports.TracingPolicy = TracingPolicy;\n/**\n* Structure that allows users to construct arbitrary transactions.\n*/\nclass TransactionBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * @param am: amount to pay\n    * @param kp: owner's XfrKeyPair\n    * @param {BigInt} am\n    * @param {XfrKeyPair} kp\n    * @returns {TransactionBuilder}\n    */\n    add_fee_relative_auto(am, kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = am;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(kp, XfrKeyPair);\n        var ptr1 = kp.ptr;\n        kp.ptr = 0;\n        var ret = wasm.transactionbuilder_add_fee_relative_auto(ptr, low0, high0, ptr1);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Use this func to get the necessary infomations for generating `Relative Inputs`\n    *\n    * - TxoRef::Relative(\"Element index of the result\")\n    * - ClientAssetRecord::from_json(\"Element of the result\")\n    * @returns {any[]}\n    */\n    get_relative_outputs() {\n        wasm.transactionbuilder_get_relative_outputs(8, this.ptr);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 4);\n        return v0;\n    }\n    /**\n    * As the last operation of any transaction,\n    * add a static fee to the transaction.\n    * @param {FeeInputs} inputs\n    * @returns {TransactionBuilder}\n    */\n    add_fee(inputs) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(inputs, FeeInputs);\n        var ptr0 = inputs.ptr;\n        inputs.ptr = 0;\n        var ret = wasm.transactionbuilder_add_fee(ptr, ptr0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * A simple fee checker for mainnet v1.0.\n    *\n    * SEE [check_fee](ledger::data_model::Transaction::check_fee)\n    * @returns {boolean}\n    */\n    check_fee() {\n        var ret = wasm.transactionbuilder_check_fee(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Create a new transaction builder.\n    * @param {BigInt} seq_id - Unique sequence ID to prevent replay attacks.\n    * @param {BigInt} seq_id\n    * @returns {TransactionBuilder}\n    */\n    static new(seq_id) {\n        uint64CvtShim[0] = seq_id;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.transactionbuilder_new(low0, high0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransactionBuilder to add an asset definition operation to a transaction builder instance.\n    * @example <caption> Error handling </caption>\n    * try {\n    *     await wasm.add_operation_create_asset(wasm.new_keypair(), \"test_memo\", wasm.random_asset_type(), wasm.AssetRules.default());\n    * } catch (err) {\n    *     console.log(err)\n    * }\n    *\n    * @param {XfrKeyPair} key_pair -  Issuer XfrKeyPair.\n    * @param {string} memo - Text field for asset definition.\n    * @param {string} token_code - Optional Base64 string representing the token code of the asset to be issued.\n    * If empty, a token code will be chosen at random.\n    * @param {AssetRules} asset_rules - Asset rules object specifying which simple policies apply\n    * to the asset.\n    * @param {XfrKeyPair} key_pair\n    * @param {string} memo\n    * @param {string} token_code\n    * @param {AssetRules} asset_rules\n    * @returns {TransactionBuilder}\n    */\n    add_operation_create_asset(key_pair, memo, token_code, asset_rules) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(memo, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(token_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        _assertClass(asset_rules, AssetRules);\n        var ptr2 = asset_rules.ptr;\n        asset_rules.ptr = 0;\n        var ret = wasm.transactionbuilder_add_operation_create_asset(ptr, key_pair.ptr, ptr0, len0, ptr1, len1, ptr2);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @ignore\n    * @param {XfrKeyPair} key_pair\n    * @param {string} memo\n    * @param {string} token_code\n    * @param {string} policy_choice\n    * @param {AssetRules} asset_rules\n    * @returns {TransactionBuilder}\n    */\n    add_operation_create_asset_with_policy(key_pair, memo, token_code, policy_choice, asset_rules) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(memo, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(token_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(policy_choice, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        _assertClass(asset_rules, AssetRules);\n        var ptr3 = asset_rules.ptr;\n        asset_rules.ptr = 0;\n        var ret = wasm.transactionbuilder_add_operation_create_asset_with_policy(ptr, key_pair.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @ignore\n    * @param {string} token_code\n    * @param {string} which_check\n    * @returns {TransactionBuilder}\n    */\n    add_policy_option(token_code, which_check) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ptr0 = passStringToWasm0(token_code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(which_check, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbuilder_add_policy_option(ptr, ptr0, len0, ptr1, len1);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransactionBuilder to add an asset issuance to a transaction builder instance.\n    *\n    * Use this function for simple one-shot issuances.\n    *\n    * @param {XfrKeyPair} key_pair  - Issuer XfrKeyPair.\n    * and types of traced assets.\n    * @param {string} code - base64 string representing the token code of the asset to be issued.\n    * @param {BigInt} seq_num - Issuance sequence number. Every subsequent issuance of a given asset type must have a higher sequence number than before.\n    * @param {BigInt} amount - Amount to be issued.\n    * @param {boolean} conf_amount - `true` means the asset amount is confidential, and `false` means it's nonconfidential.\n    * @param {PublicParams} zei_params - Public parameters necessary to generate asset records.\n    * @param {XfrKeyPair} key_pair\n    * @param {string} code\n    * @param {BigInt} seq_num\n    * @param {BigInt} amount\n    * @param {boolean} conf_amount\n    * @param {PublicParams} zei_params\n    * @returns {TransactionBuilder}\n    */\n    add_basic_issue_asset(key_pair, code, seq_num, amount, conf_amount, zei_params) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        uint64CvtShim[0] = seq_num;\n        const low1 = u32CvtShim[0];\n        const high1 = u32CvtShim[1];\n        uint64CvtShim[0] = amount;\n        const low2 = u32CvtShim[0];\n        const high2 = u32CvtShim[1];\n        _assertClass(zei_params, PublicParams);\n        var ret = wasm.transactionbuilder_add_basic_issue_asset(ptr, key_pair.ptr, ptr0, len0, low1, high1, low2, high2, conf_amount, zei_params.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that appends a credential commitment to the address\n    * identity registry.\n    * @param {XfrKeyPair} key_pair - Ledger key that is tied to the credential.\n    * @param {CredUserPublicKey} user_public_key - Public key of the credential user.\n    * @param {CredIssuerPublicKey} issuer_public_key - Public key of the credential issuer.\n    * @param {CredentialCommitment} commitment - Credential commitment to add to the address identity registry.\n    * @param {CredPoK} pok- Proof that the credential commitment is valid.\n    * @see {@link module:Findora-Wasm.wasm_credential_commit|wasm_credential_commit} for information about how to generate a credential\n    * commitment.\n    * @param {XfrKeyPair} key_pair\n    * @param {CredUserPublicKey} user_public_key\n    * @param {CredIssuerPublicKey} issuer_public_key\n    * @param {CredentialCommitment} commitment\n    * @param {CredentialPoK} pok\n    * @returns {TransactionBuilder}\n    */\n    add_operation_air_assign(key_pair, user_public_key, issuer_public_key, commitment, pok) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(key_pair, XfrKeyPair);\n        _assertClass(user_public_key, CredUserPublicKey);\n        _assertClass(issuer_public_key, CredIssuerPublicKey);\n        _assertClass(commitment, CredentialCommitment);\n        _assertClass(pok, CredentialPoK);\n        var ret = wasm.transactionbuilder_add_operation_air_assign(ptr, key_pair.ptr, user_public_key.ptr, issuer_public_key.ptr, commitment.ptr, pok.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that removes a hash from ledger's custom data\n    * store.\n    * @param {XfrKeyPair} auth_key_pair - Key pair that is authorized to delete the hash at the\n    * provided key.\n    * @param {Key} key - The key of the custom data store whose value will be cleared if the\n    * transaction validates.\n    * @param {BigInt} seq_num - Nonce to prevent replays.\n    * @param {XfrKeyPair} auth_key_pair\n    * @param {Key} key\n    * @param {BigInt} seq_num\n    * @returns {TransactionBuilder}\n    */\n    add_operation_kv_update_no_hash(auth_key_pair, key, seq_num) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(auth_key_pair, XfrKeyPair);\n        _assertClass(key, Key);\n        uint64CvtShim[0] = seq_num;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.transactionbuilder_add_operation_kv_update_no_hash(ptr, auth_key_pair.ptr, key.ptr, low0, high0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that adds a hash to the ledger's custom data\n    * store.\n    * @param {XfrKeyPair} auth_key_pair - Key pair that is authorized to add the hash at the\n    * provided key.\n    * @param {Key} key - The key of the custom data store the value will be added to if the\n    * transaction validates.\n    * @param {KVHash} hash - The hash to add to the custom data store.\n    * @param {BigInt} seq_num - Nonce to prevent replays.\n    * @param {XfrKeyPair} auth_key_pair\n    * @param {Key} key\n    * @param {BigInt} seq_num\n    * @param {KVHash} kv_hash\n    * @returns {TransactionBuilder}\n    */\n    add_operation_kv_update_with_hash(auth_key_pair, key, seq_num, kv_hash) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(auth_key_pair, XfrKeyPair);\n        _assertClass(key, Key);\n        uint64CvtShim[0] = seq_num;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(kv_hash, KVHash);\n        var ret = wasm.transactionbuilder_add_operation_kv_update_with_hash(ptr, auth_key_pair.ptr, key.ptr, low0, high0, kv_hash.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds an operation to the transaction builder that adds a hash to the ledger's custom data\n    * store.\n    * @param {XfrKeyPair} auth_key_pair - Asset creator key pair.\n    * @param {String} code - base64 string representing token code of the asset whose memo will be updated.\n    * transaction validates.\n    * @param {String} new_memo - The new asset memo.\n    * @see {@link module:Findora-Wasm~AssetRules#set_updatable|AssetRules.set_updatable} for more information about how\n    * to define an updatable asset.\n    * @param {XfrKeyPair} auth_key_pair\n    * @param {string} code\n    * @param {string} new_memo\n    * @returns {TransactionBuilder}\n    */\n    add_operation_update_memo(auth_key_pair, code, new_memo) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(auth_key_pair, XfrKeyPair);\n        var ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(new_memo, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbuilder_add_operation_update_memo(ptr, auth_key_pair.ptr, ptr0, len0, ptr1, len1);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Adds a serialized transfer asset operation to a transaction builder instance.\n    * @param {string} op - a JSON-serialized transfer operation.\n    * @see {@link module:Findora-Wasm~TransferOperationBuilder} for details on constructing a transfer operation.\n    * @throws Will throw an error if `op` fails to deserialize.\n    * @param {string} op\n    * @returns {TransactionBuilder}\n    */\n    add_transfer_operation(op) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ptr0 = passStringToWasm0(op, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbuilder_add_transfer_operation(ptr, ptr0, len0);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @param {XfrKeyPair} kp\n    * @returns {TransactionBuilder}\n    */\n    sign(kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(kp, XfrKeyPair);\n        var ret = wasm.transactionbuilder_sign(ptr, kp.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * Extracts the serialized form of a transaction.\n    * @returns {string}\n    */\n    transaction() {\n        try {\n            wasm.transactionbuilder_transaction(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Calculates transaction handle.\n    * @returns {string}\n    */\n    transaction_handle() {\n        try {\n            wasm.transactionbuilder_transaction_handle(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Fetches a client record from a transaction.\n    * @param {number} idx - Record to fetch. Records are added to the transaction builder sequentially.\n    * @param {number} idx\n    * @returns {ClientAssetRecord}\n    */\n    get_owner_record(idx) {\n        var ret = wasm.transactionbuilder_get_owner_record(this.ptr, idx);\n        return ClientAssetRecord.__wrap(ret);\n    }\n    /**\n    * Fetches an owner memo from a transaction\n    * @param {number} idx - Owner memo to fetch. Owner memos are added to the transaction builder sequentially.\n    * @param {number} idx\n    * @returns {OwnerMemo | undefined}\n    */\n    get_owner_memo(idx) {\n        var ret = wasm.transactionbuilder_get_owner_memo(this.ptr, idx);\n        return ret === 0 ? undefined : OwnerMemo.__wrap(ret);\n    }\n}\nmodule.exports.TransactionBuilder = TransactionBuilder;\n/**\n* Structure that enables clients to construct complex transfers.\n*/\nclass TransferOperationBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransferOperationBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_transferoperationbuilder_free(ptr);\n    }\n    /**\n    * Create a new transfer operation builder.\n    * @returns {TransferOperationBuilder}\n    */\n    static new() {\n        var ret = wasm.transferoperationbuilder_new();\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * @ignore\n    * @returns {string}\n    */\n    debug() {\n        try {\n            wasm.transferoperationbuilder_debug(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an input to a transfer operation builder.\n    * @param {TxoRef} txo_ref - Absolute or relative utxo reference\n    * @param {string} asset_record - Serialized client asset record to serve as transfer input. This record must exist on the\n    * ledger for the transfer to be valid.\n    * @param {OwnerMemo} owner_memo - Opening parameters.\n    * @param tracing_key {AssetTracerKeyPair} - Tracing key, must be added to traceable\n    * assets.\n    * @param {XfrKeyPair} key - Key pair associated with the input.\n    * @param {BigInt} amount - Amount of input record to transfer.\n    * @see {@link module:Findora-Wasm~TxoRef#create_absolute_txo_ref|TxoRef.create_absolute_txo_ref}\n    * or {@link module:Findora-Wasm~TxoRef#create_relative_txo_ref|TxoRef.create_relative_txo_ref} for details on txo\n    * references.\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for details on fetching blind asset records.\n    * @throws Will throw an error if `oar` or `txo_ref` fail to deserialize.\n    * @param {TxoRef} txo_ref\n    * @param {ClientAssetRecord} asset_record\n    * @param {OwnerMemo | undefined} owner_memo\n    * @param {TracingPolicies} tracing_policies\n    * @param {XfrKeyPair} key\n    * @param {BigInt} amount\n    * @returns {TransferOperationBuilder}\n    */\n    add_input_with_tracing(txo_ref, asset_record, owner_memo, tracing_policies, key, amount) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(txo_ref, TxoRef);\n        var ptr0 = txo_ref.ptr;\n        txo_ref.ptr = 0;\n        _assertClass(asset_record, ClientAssetRecord);\n        var ptr1 = asset_record.ptr;\n        asset_record.ptr = 0;\n        let ptr2 = 0;\n        if (!isLikeNone(owner_memo)) {\n            _assertClass(owner_memo, OwnerMemo);\n            ptr2 = owner_memo.ptr;\n            owner_memo.ptr = 0;\n        }\n        _assertClass(tracing_policies, TracingPolicies);\n        _assertClass(key, XfrKeyPair);\n        uint64CvtShim[0] = amount;\n        const low3 = u32CvtShim[0];\n        const high3 = u32CvtShim[1];\n        var ret = wasm.transferoperationbuilder_add_input_with_tracing(ptr, ptr0, ptr1, ptr2, tracing_policies.ptr, key.ptr, low3, high3);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an input to a transfer operation builder.\n    * @param {TxoRef} txo_ref - Absolute or relative utxo reference\n    * @param {string} asset_record - Serialized client asset record to serve as transfer input. This record must exist on the\n    * ledger for the transfer to be valid\n    * @param {OwnerMemo} owner_memo - Opening parameters.\n    * @param {XfrKeyPair} key - Key pair associated with the input.\n    * @param {BigInt} amount - Amount of input record to transfer\n    * or {@link module:Findora-Wasm~TxoRef#create_relative_txo_ref|TxoRef.create_relative_txo_ref} for details on txo\n    * references.\n    * @see {@link module:Findora-Network~Network#getUtxo|Network.getUtxo} for details on fetching blind asset records.\n    * @throws Will throw an error if `oar` or `txo_ref` fail to deserialize.\n    * @param {TxoRef} txo_ref\n    * @param {ClientAssetRecord} asset_record\n    * @param {OwnerMemo | undefined} owner_memo\n    * @param {XfrKeyPair} key\n    * @param {BigInt} amount\n    * @returns {TransferOperationBuilder}\n    */\n    add_input_no_tracing(txo_ref, asset_record, owner_memo, key, amount) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(txo_ref, TxoRef);\n        var ptr0 = txo_ref.ptr;\n        txo_ref.ptr = 0;\n        _assertClass(asset_record, ClientAssetRecord);\n        let ptr1 = 0;\n        if (!isLikeNone(owner_memo)) {\n            _assertClass(owner_memo, OwnerMemo);\n            ptr1 = owner_memo.ptr;\n            owner_memo.ptr = 0;\n        }\n        _assertClass(key, XfrKeyPair);\n        uint64CvtShim[0] = amount;\n        const low2 = u32CvtShim[0];\n        const high2 = u32CvtShim[1];\n        var ret = wasm.transferoperationbuilder_add_input_no_tracing(ptr, ptr0, asset_record.ptr, ptr1, key.ptr, low2, high2);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an output to a transfer operation builder.\n    *\n    * @param {BigInt} amount - amount to transfer to the recipient.\n    * @param {XfrPublicKey} recipient - public key of the recipient.\n    * @param tracing_key {AssetTracerKeyPair} - Optional tracing key, must be added to traced\n    * assets.\n    * @param code {string} - String representation of the asset token code.\n    * @param conf_amount {boolean} - `true` means the output's asset amount is confidential, and `false` means it's nonconfidential.\n    * @param conf_type {boolean} - `true` means the output's asset type is confidential, and `false` means it's nonconfidential.\n    * @throws Will throw an error if `code` fails to deserialize.\n    * @param {BigInt} amount\n    * @param {XfrPublicKey} recipient\n    * @param {TracingPolicies} tracing_policies\n    * @param {string} code\n    * @param {boolean} conf_amount\n    * @param {boolean} conf_type\n    * @returns {TransferOperationBuilder}\n    */\n    add_output_with_tracing(amount, recipient, tracing_policies, code, conf_amount, conf_type) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = amount;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(recipient, XfrPublicKey);\n        _assertClass(tracing_policies, TracingPolicies);\n        var ptr1 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transferoperationbuilder_add_output_with_tracing(ptr, low0, high0, recipient.ptr, tracing_policies.ptr, ptr1, len1, conf_amount, conf_type);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add an output to a transfer operation builder.\n    *\n    * @param {BigInt} amount - amount to transfer to the recipient\n    * @param {XfrPublicKey} recipient - public key of the recipient\n    * @param code {string} - String representaiton of the asset token code\n    * @param conf_amount {boolean} - `true` means the output's asset amount is confidential, and `false` means it's nonconfidential.\n    * @param conf_type {boolean} - `true` means the output's asset type is confidential, and `false` means it's nonconfidential.\n    * @throws Will throw an error if `code` fails to deserialize.\n    * @param {BigInt} amount\n    * @param {XfrPublicKey} recipient\n    * @param {string} code\n    * @param {boolean} conf_amount\n    * @param {boolean} conf_type\n    * @returns {TransferOperationBuilder}\n    */\n    add_output_no_tracing(amount, recipient, code, conf_amount, conf_type) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        uint64CvtShim[0] = amount;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        _assertClass(recipient, XfrPublicKey);\n        var ptr1 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.transferoperationbuilder_add_output_no_tracing(ptr, low0, high0, recipient.ptr, ptr1, len1, conf_amount, conf_type);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to ensure the transfer inputs and outputs are balanced.\n    * This function will add change outputs for all unspent portions of input records.\n    * @throws Will throw an error if the transaction cannot be balanced.\n    * @returns {TransferOperationBuilder}\n    */\n    balance() {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.transferoperationbuilder_balance(ptr);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to finalize the transaction.\n    *\n    * @throws Will throw an error if input and output amounts do not add up.\n    * @throws Will throw an error if not all record owners have signed the transaction.\n    * @returns {TransferOperationBuilder}\n    */\n    create() {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        var ret = wasm.transferoperationbuilder_create(ptr);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Wraps around TransferOperationBuilder to add a signature to the operation.\n    *\n    * All input owners must sign.\n    *\n    * @param {XfrKeyPair} kp - key pair of one of the input owners.\n    * @param {XfrKeyPair} kp\n    * @returns {TransferOperationBuilder}\n    */\n    sign(kp) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(kp, XfrKeyPair);\n        var ret = wasm.transferoperationbuilder_sign(ptr, kp.ptr);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * Co-sign an input index\n    * @param {XfrKeyPair} kp - Co-signature key.\n    * @params {Number} input_idx - Input index to apply co-signature to.\n    * @param {XfrKeyPair} kp\n    * @param {number} input_idx\n    * @returns {TransferOperationBuilder}\n    */\n    add_cosignature(kp, input_idx) {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        _assertClass(kp, XfrKeyPair);\n        var ret = wasm.transferoperationbuilder_add_cosignature(ptr, kp.ptr, input_idx);\n        return TransferOperationBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    builder() {\n        try {\n            wasm.transferoperationbuilder_builder(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * Wraps around TransferOperationBuilder to extract an operation expression as JSON.\n    * @returns {string}\n    */\n    transaction() {\n        try {\n            wasm.transferoperationbuilder_transaction(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\nmodule.exports.TransferOperationBuilder = TransferOperationBuilder;\n/**\n* Indicates whether the TXO ref is an absolute or relative value.\n*/\nclass TxoRef {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TxoRef.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_txoref_free(ptr);\n    }\n    /**\n    * Creates a relative txo reference as a JSON string. Relative txo references are offset\n    * backwards from the operation they appear in -- 0 is the most recent, (n-1) is the first output\n    * of the transaction.\n    *\n    * Use relative txo indexing when referring to outputs of intermediate operations (e.g. a\n    * transaction containing both an issuance and a transfer).\n    *\n    * # Arguments\n    * @param {BigInt} idx -  Relative TXO (transaction output) SID.\n    * @param {BigInt} idx\n    * @returns {TxoRef}\n    */\n    static relative(idx) {\n        uint64CvtShim[0] = idx;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.txoref_relative(low0, high0);\n        return TxoRef.__wrap(ret);\n    }\n    /**\n    * Creates an absolute transaction reference as a JSON string.\n    *\n    * Use absolute txo indexing when referring to an output that has been assigned a utxo index (i.e.\n    * when the utxo has been committed to the ledger in an earlier transaction).\n    *\n    * # Arguments\n    * @param {BigInt} idx -  Txo (transaction output) SID.\n    * @param {BigInt} idx\n    * @returns {TxoRef}\n    */\n    static absolute(idx) {\n        uint64CvtShim[0] = idx;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        var ret = wasm.txoref_absolute(low0, high0);\n        return TxoRef.__wrap(ret);\n    }\n}\nmodule.exports.TxoRef = TxoRef;\n/**\n*/\nclass XfrKeyPair {\n\n    static __wrap(ptr) {\n        const obj = Object.create(XfrKeyPair.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_xfrkeypair_free(ptr);\n    }\n    /**\n    * @returns {XfrPublicKey}\n    */\n    get pub_key() {\n        var ret = wasm.__wbg_get_xfrkeypair_pub_key(this.ptr);\n        return XfrPublicKey.__wrap(ret);\n    }\n    /**\n    * @param {XfrPublicKey} arg0\n    */\n    set pub_key(arg0) {\n        _assertClass(arg0, XfrPublicKey);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_xfrkeypair_pub_key(this.ptr, ptr0);\n    }\n}\nmodule.exports.XfrKeyPair = XfrKeyPair;\n/**\n*/\nclass XfrPublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(XfrPublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_xfrpublickey_free(ptr);\n    }\n}\nmodule.exports.XfrPublicKey = XfrPublicKey;\n\nmodule.exports.__wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_json_serialize = function(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = JSON.stringify(obj === undefined ? null : obj);\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_json_parse = function(arg0, arg1) {\n    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getRandomValues_57e4008f45f0e105 = handleError(function(arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n});\n\nmodule.exports.__wbg_randomFillSync_d90848a552cbd666 = handleError(function(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n});\n\nmodule.exports.__wbg_self_f865985e662246aa = handleError(function() {\n    var ret = self.self;\n    return addHeapObject(ret);\n});\n\nmodule.exports.__wbg_static_accessor_MODULE_39947eb3fe77895f = function() {\n    var ret = module;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_require_c59851dfa0dc7e78 = handleError(function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n});\n\nmodule.exports.__wbg_crypto_bfb05100db79193b = function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_msCrypto_f6dddc6ae048b7e2 = function(arg0) {\n    var ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_is_undefined = function(arg0) {\n    var ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nmodule.exports.__wbg_self_86b4b13392c7af56 = handleError(function() {\n    var ret = self.self;\n    return addHeapObject(ret);\n});\n\nmodule.exports.__wbg_static_accessor_MODULE_452b4680e8614c81 = function() {\n    var ret = module;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_require_f5521a5b85ad2542 = function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_crypto_b8c92eaac23d0d80 = function(arg0) {\n    var ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_msCrypto_9ad6677321a08dd8 = function(arg0) {\n    var ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getRandomValues_dd27e6b0652b3236 = function(arg0) {\n    var ret = getObject(arg0).getRandomValues;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_getRandomValues_e57c9b75ddead065 = function(arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n};\n\nmodule.exports.__wbg_randomFillSync_d2ba53160aec6aba = function(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nmodule.exports.__wbg_buffer_eb5185aa4a8e9c62 = function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_length_2e324c9c0e74a81d = function(arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\n\nmodule.exports.__wbg_new_3d94e83f0a6bf252 = function(arg0) {\n    var ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_set_d4d7629a896d4b3e = function(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nmodule.exports.__wbg_newwithlength_02a009c0728d3ba1 = function(arg0) {\n    var ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbg_subarray_cc54babc55409ee0 = function(arg0, arg1, arg2) {\n    var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nmodule.exports.__wbindgen_debug_string = function(arg0, arg1) {\n    var ret = debugString(getObject(arg1));\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nmodule.exports.__wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nmodule.exports.__wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\nmodule.exports.__wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\nconst path = require('path').join(__dirname, 'wasm_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nwasm = wasmInstance.exports;\nmodule.exports.__wasm = wasm;\n\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n"],"sourceRoot":""}